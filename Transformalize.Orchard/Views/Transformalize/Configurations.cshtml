@using Orchard.ContentManagement
@using Orchard.Core.Title.Models
@using Transformalize.Orchard.Models
@model Configurations
@{
    Style.Include("configurations-001.min.css").AtHead();
    Style.Include("jquery.toastmessage.min.css").AtHead();
    
    Script.Require("jQuery").AtFoot();
    Script.Include("jquery.blockUI.min.js").AtFoot();
    Script.Include("jquery.toastmessage.min.js").AtFoot();
    Script.Include("common.ajax.min.js").AtFoot();
    Script.Include("configurations-002.min.js").AtFoot();
    
    Layout.Title = "Configurations";
}


<script type="text/javascript">
    //<!--
    var settings = {
        token: '@(Html.AntiForgeryTokenValueOrchard())',
        jobQueueLink : '@(Url.Action("List","Admin", new RouteValueDictionary { {"area","Orchard.JobsQueue"}}))'
    }
    //-->
</script>

@if (Model.Enqueue) {
    <div class="row">
        <div class="col-md-12">
            <div class="btn-group pull-right">
                <button onclick="javascript: window.open('@(Url.Action("List","Admin",new RouteValueDictionary { {"area","Orchard.JobsQueue"}}))', '_blank');"
                        type="button"
                        class="btn btn-xs btn-warning">
                    <span class="glyphicon glyphicon-share"></span> Queue
                </button>
                <button onclick="javascript: window.open('@(Url.Content("~/Admin/Reports"))', '_blank');"
                        type="button"
                        class="btn btn-xs btn-info">
                    <span class="glyphicon glyphicon-inbox"></span> Reports
                </button>
            </div>
        </div>
    </div>
}

<table class="table table-condensed table-hover" style="font-size: smaller;">
    <thead>
        <tr>
            <th>Id</th>
            <th>Title</th>
            <th>Input</th>
            <th>File</th>
            <th>Mode</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var part in Model.ConfigurationParts) {
            var incoming = Model.CurrentId == part.Id && !Model.InputFileName.Equals(string.Empty);
            <tr class="@(Model.CurrentId == part.Id ? "active" : string.Empty)">
                <td>
                    <a href="@Url.Action("Api/Configuration","Api",new { id=part.Id})" target="_blank">@part.Id</a>
                </td>
                <td>@(part.As<TitlePart>().Title)</td>
                @if (part.RequiresInputFile() == true) {
                    using (Html.BeginFormAntiForgeryPost(Url.Action("Execute", "Transformalize", new {id=part.Id}), FormMethod.Post, new { enctype = "multipart/form-data" })) {
                        <td>
                            <input type="hidden" name="InputFile" value="@(Model.InputFileId)"/>
                            <input type="hidden" name="OutputFile" value="@(Model.OutputFileId)"/>
                            <div class="btn-group">
                                <span class="btn btn-warning btn-file btn-xs">
                                    Browse <input name="file" type="file"> 
                                </span>
                                <button type="button" class="btn btn-info btn-xs" onclick="window.open('@Url.Action("Files","File",new{SelectFor=part.Id})', '_self');">Select</button>
                            </div>
                        </td>
                    if (incoming) {
                        <td class="text-success td-file">@Model.InputFileName</td>
                    } else {
                        <td class="text-warning td-file">you need a file...</td>
                    }
                    <td>
                        @if (part.HasModes()) {
                            if (part.ToModes().Length > 1) {
                                <div class="btn-group btn-group-xs" data-toggle="buttons">
                                    @foreach (var mode in part.ToModes()) {
                                        <label class="mode btn btn-default @(mode.IsDefault || Model.Mode.Equals(mode.Name) ? "active" : string.Empty)">
                                            <input type="radio" name="mode" value="@(mode.Name)" checked="@(mode.IsDefault)" data-toggle="button"> @mode.Name
                                        </label>
                                    }
                                </div>
                            } else {
                                <input type="hidden" name="mode" value="@(part.ToModes()[0].Name)"/>
                            }
                        }                            
                    </td>
                    <td class="td-submit">
                        <button type="submit" class="btn btn-@(incoming?"primary":"disabled") btn-xs" disabled="@(!incoming)">
                            <span class="glyphicon glyphicon-play-circle"></span> Run
                        </button>
                        @if (Model.Edit) {
                            <button type="button" class="btn btn-info btn-xs" onclick="window.open('@(Url.Content("~/Admin/Contents/Edit/" + part.Id))','_self');">
                                <span class="glyphicon glyphicon-edit"></span> Edit
                            </button>
                        }
                    </td>
                    }
                } else {
                    using (Html.BeginFormAntiForgeryPost(Url.Action("Execute", "Transformalize", new { id = part.Id }), FormMethod.Post)) {
                    <td> &nbsp;</td>
                    <td> &nbsp;</td>
                    <td>
                        @if (part.HasModes()) {
                            if (part.ToModes().Length > 1) {
                                <div class="btn-group btn-group-xs" data-toggle="buttons">
                                    @foreach (var mode in part.ToModes()) {
                                        <label class="mode btn btn-default @(mode.IsDefault || Model.Mode.Equals(mode.Name) ? "active" : string.Empty)">
                                            <input type="radio" name="mode" value="@(mode.Name)" checked="@(mode.IsDefault)" data-toggle="button"> @mode.Name
                                        </label>
                                    }
                                </div>
                            } else {
                                <input type="hidden" name="mode" value="@(part.ToModes()[0].Name)" />
                            }
                        }
                    </td>
                         <td>
                             <input type="hidden" name="InputFile" value="@(Model.InputFileId)"/>
                             <input type="hidden" name="OutputFile" value="@(Model.OutputFileId)"/>
                             <button type="submit" class="btn btn-primary btn-xs">
                                 <span class="glyphicon glyphicon-play-circle"></span> Run
                             </button>
                            @if (Model.Enqueue && Model.InputFileId == 0) {
                                <button id="enqueue_@(part.Id)" value="@(Url.Action("Api/Enqueue","Api",new { id=part.Id}))" type="button" class="btn btn-warning btn-xs enqueue">
                                    <span class="glyphicon glyphicon-share"></span> Job
                                </button>
                             }
                            @if (Model.Edit) {
                                <button type="button" class="btn btn-info btn-xs" onclick="window.open('@(Url.Content("~/Admin/Contents/Edit/" + part.Id))','_self');">
                                    <span class="glyphicon glyphicon-edit"></span> Edit
                                </button>
                            }
                         </td>
                    }
                }
            </tr>
        }
    </tbody>
</table>