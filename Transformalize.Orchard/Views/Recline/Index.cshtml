@model ConfigurationPart
@using Transformalize.Orchard.Models

@{
    var title = Model.Title();

    Script.Require("jQuery").AtHead();
    Script.Include("common.ajax.min.js").AtFoot();

    Script.Include("Recline-0.6/vendor/underscore/1.4.4/underscore.js").AtFoot();
    Script.Include("Recline-0.6/vendor/backbone/1.0.0/backbone.js").AtFoot();
    Script.Include("Recline-0.6/vendor/mustache/0.5.0-dev/mustache.js").AtFoot();

    
    //Script.Include("Recline-0.6/vendor/slickgrid/2.0.1/jquery.event.drag-2.2.js").AtFoot();
    //Script.Include("Recline-0.6/vendor/slickgrid/2.0.1/jquery-ui-1.8.16.custom.min.js").AtFoot();
    //Script.Include("Recline-0.6/vendor/slickgrid/2.0.1/slick.core.min.js").AtFoot();
    //Script.Include("Recline-0.6/vendor/slickgrid/2.0.1/slick.grid.min.js").AtFoot();
    //Script.Include("Recline-0.6/vendor/slickgrid/2.0.1/plugins/slick.rowselectionmodel.min.js").AtFoot();
    //Script.Include("Recline-0.6/vendor/slickgrid/2.0.1/plugins/slick.rowmovemanager.min.js").AtFoot();

    Script.Include("SlickGrid-2.1.0/lib/jquery-1.7.min.js").AtFoot();

    Script.Include("SlickGrid-2.1.0/lib/jquery-ui-1.8.16.custom.min.js").AtFoot();
    Script.Include("SlickGrid-2.1.0/lib/jquery.event.drag-2.2.min.js").AtFoot();
    Script.Include("SlickGrid-2.1.0/lib/jquery.event.drop-2.2.min.js").AtFoot();
    Script.Include("SlickGrid-2.1.0/slick.core.min.js").AtFoot();

    Script.Include("SlickGrid-2.1.0/plugins/slick.cellrangedecorator.js").AtFoot();
    Script.Include("SlickGrid-2.1.0/plugins/slick.cellrangeselector.js").AtFoot();
    Script.Include("SlickGrid-2.1.0/plugins/slick.cellselectionmodel.js").AtFoot();

    Script.Include("SlickGrid-2.1.0/slick.grid.min.js").AtFoot();
    Script.Include("SlickGrid-2.1.0/slick.formatters.min.js");
    Script.Include("SlickGrid-2.1.0/slick.editors.min.js");
        
    Script.Include("Recline-0.6/dist/recline.js").AtFoot();
    Script.Include("Recline-0.6/src/view.slickgrid.js").AtFoot();

    Script.Include("jquery.blockUI.min.js").AtFoot();
    Script.Include("jquery.toastmessage.min.js").AtFoot();

    Style.Include("Recline-0.6/css/grid.css");
    Style.Include("jquery.toastmessage.min.css");

    Layout.Title = title;
}
<style>
    
     
</style>

<h2>@(title)</h2>

<div>
    <button id="load" type="button" class="btn btn-warning btn-xs" style="margin-bottom: 7px;">
        <span class="glyphicon glyphicon-refresh"></span> Reload
    </button>
</div>

<div id="target" style="height: 400px"></div>

<script>
    //<!--
    var settings = {
        load: '@(Url.Action("Load", "Recline", new { id = Model.Id }))',
        token: '@Html.AntiForgeryTokenValueOrchard()',
        dateFormat: 'yy-mm-dd'
    };

    var state = {
        grid: {},
        dataSet: [],
        fields:[]
    };

    function getSimpleType(systemType) {
        return systemType.toLowerCase().replace('system.', '');
    }

    function getReclineType(type) {
        switch (type) {
            case 'int16':
            case 'int32':
            case 'int64':
            case 'short':
            case 'long':
            case 'byte':
            case 'int':
                return 'integer';

            case 'double':
            case 'float':
            case 'decimal':
                return 'number';

            case 'date':
                return 'date';
            case 'time':
                return 'time';
            case 'datetime':
                return 'date-time';

            case 'bool':
            case 'boolean':
                return 'boolean';
            default:
                return 'string';
        }
    };


    $(document).ready(function () {

        $('#load').click(function () {
            $.get(settings.load, function (tfl) {
                if (tfl.status === 200) {

                    state.fields = tfl.processes[0].add.entities.add.fields.add.filter(function (f) {
                        return f.output.toLowerCase() == 'true';
                    });

                    state.dataSet = new recline.Model.Dataset({
                        fields: $.map(state.fields, function (f) {
                            return new recline.Model.Field({
                                id: f.alias,
                                label: f.label,
                                type: getReclineType(getSimpleType(f.type)),
                                format: false,
                                is_derived: false
                            });
                        }),
                        records: tfl.response[0]
                    });

                    console.log(state.dataSet);

                    var $el = $('#target');
                    state.grid = new recline.View.SlickGrid({
                        model: state.dataSet,
                        el: $el
                    });
                    state.grid.visible = true;
                    state.grid.render();

                    $().toastmessage('showSuccessToast', "Data Loaded");
                } else {
                    $().toastmessage('showErrorToast', tfl.message);
                }
            }, 'json');
        });

        $('#load').click();
    });
    // -->
</script>