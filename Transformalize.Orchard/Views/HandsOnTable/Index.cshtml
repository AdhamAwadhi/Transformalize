@model ConfigurationPart
@using Transformalize.Orchard.Models

@{
    var title = Model.Title();
    Script.Require("jQuery").AtHead();
    Script.Include("jquery.handsontable.full.min.js").AtHead();
    Script.Include("jquery.blockUI.js").AtHead();
    Script.Include("jquery.toastmessage.js").AtHead();
    
    Style.Include("jquery.handsontable.full.min.css");
    Style.Include("jquery.handsontable.bootstrap.css");
    Style.Include("jquery.toastmessage.css");
    Layout.Title = title;
}

<h2>@(title)</h2>

<button id="load" type="button" class="btn btn-warning btn-xs" style="margin-bottom: 7px;">
    <span class="glyphicon glyphicon-refresh"></span> Reload
</button>

<button id="save" type="button" class="btn btn-primary btn-xs" style="margin-bottom: 7px;">
    <span class="glyphicon glyphicon-floppy-save"></span> Save
</button>

<div id="target" class="handsontable"></div>

<script>
    //<!--
    $(document).ready(function () {

        var settings = {
            load: '@(Url.Action("Load", "HandsOnTable", new { id = Model.Id }))',
            save: '@(Url.Action("Save", "HandsOnTable", new { id = Model.Id }))',
            token: '@Html.AntiForgeryTokenValueOrchard()'
        };

        $(document).ajaxStart(function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff',
                    baseZ: 1021
                }
            });
        });

        $(document).ajaxComplete(function () {
            $.unblockUI();
        });

        $(document).ajaxError(function (event, request) {
            $.unblockUI();
            $().toastmessage('showErrorToast', request.responseText);
        });

        if (!Array.prototype.filter) {
            Array.prototype.filter = function (fun /*, thisp*/) {
                var len = this.length >>> 0;
                if (typeof fun != "function")
                    throw new TypeError();

                var res = [];
                var thisp = arguments[1];
                for (var i = 0; i < len; i++) {
                    if (i in this) {
                        var val = this[i]; // in case fun mutates this
                        if (fun.call(thisp, val, i, this))
                            res.push(val);
                    }
                }
                return res;
            };
        }

        $('#load').click(function () {
            $.get(settings.load, function (tfl) {
                if (tfl.status === 200) {
                    var fields = tfl.processes[0].add.entities.add.fields.add.filter(function (item) {
                        return !item.hasOwnProperty('output') || item.output === true;
                    });
                    var headers = $.map(fields, function (f) {
                        return f.label;
                    });
                    var data = tfl.response[0];
                    if (data.length > 0) {
                        $('#target').handsontable({
                            data: data,
                            minSpareRows: 1,
                            rowHeaders: true,
                            colHeaders: headers,
                            contextMenu: true
                        });
                    } else {
                        $('#target').handsontable({
                            startRows: 1,
                            startCols: headers.length,
                            minSpareRows: 1,
                            rowHeaders: true,
                            colHeaders: headers,
                            contextMenu: true
                        });
                    }
                    $().toastmessage('showSuccessToast', "Data Loaded");
                } else {
                    $().toastmessage('showErrorToast', tfl.message);
                }
            }, 'json');
        });

        $('#save').click(function () {
            var data = $('#target').data('handsontable').getData().slice().filter(function (item) {
                for (i = 0; i < item.length; i++) {
                    if (item[i] == null) {
                        return false;
                    }
                }
                return true;
            });

            $.ajax({
                url: settings.save,
                data: { "data": JSON.stringify(data), "__RequestVerificationToken": settings.token },
                type: 'POST',
                success: function (tfl) {
                    if (tfl.status === 200) {
                        $().toastmessage('showSuccessToast', "Data Saved");
                    } else {
                        $().toastmessage('showErrorToast', tfl.message);
                    }
                }
            });
        });

        $('#load').click();

    });
    // -->
</script>