@model ConfigurationPart
@using Transformalize.Orchard.Models

@{
    var title = Model.Title();
    
    Script.Require("jQuery").AtFoot();
    Script.Include("jquery-ui/js/jquery-ui.custom.min.js").AtFoot();
    Script.Include("jquery.handsontable.full.min.js").AtFoot();
    Script.Include("jquery.blockUI.js").AtFoot();
    Script.Include("jquery.toastmessage.js").AtFoot();
    Script.Include("shims/array.filter.js").AtFoot();
    Script.Include("numeral.js").AtFoot();
    
    Style.Include("jquery.handsontable.full.min.css");
    Style.Include("jquery-ui/css/ui-bootstrap/jquery-ui.custom.css");
    Style.Include("jquery.toastmessage.css");
    Layout.Title = title;
}

<h2>@(title)</h2>

<button id="load" type="button" class="btn btn-warning btn-xs" style="margin-bottom: 7px;">
    <span class="glyphicon glyphicon-refresh"></span> Reload
</button>

<button id="save" type="button" class="btn btn-primary btn-xs" style="margin-bottom: 7px;">
    <span class="glyphicon glyphicon-floppy-save"></span> Save
</button>

<div id="target" class="handsontable"></div>

<script>
    //<!--

    function addMinutes(date, minutes) {
        return new Date(date.getTime() + minutes * 60000);
    }

    $(document).ready(function () {

        var settings = {
            load: '@(Url.Action("Load", "HandsOnTable", new { id = Model.Id }))',
            save: '@(Url.Action("Save", "HandsOnTable", new { id = Model.Id }))',
            token: '@Html.AntiForgeryTokenValueOrchard()'
        };

        $(document).ajaxStart(function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff',
                    baseZ: 1021
                }
            });
        });

        $(document).ajaxComplete(function () {
            $.unblockUI();
        });

        $(document).ajaxError(function (event, request) {
            $.unblockUI();
            $().toastmessage('showErrorToast', request.responseText);
        });

        var dateMap = [];

        $('#load').click(function () {
            $.get(settings.load, function (tfl) {
                if (tfl.status === 200) {
                    var dateFormat = 'yy-mm-dd';
                    var fields = tfl.processes[0].add.entities.add.fields.add.filter(function (item) {
                        return !item.hasOwnProperty('output') || item.output === true;
                    });
                    var headers = $.map(fields, function (f) {
                        return f.label;
                    });
                    dateMap = $.map(fields, function (f) {
                        return f.hasOwnProperty('type') && f.type.indexOf('date') == 0 ? 1 : 0;
                    });
                    var columns = $.map(fields, function (f) {
                        var column = {};
                        switch (f.hasOwnProperty('type') ? f.type.toLowerCase().replace('system.','') : 'string') {
                            case 'int16':
                            case 'int32':
                            case 'int64':
                            case 'double':
                            case 'float':
                            case 'decimal':
                            case 'short':
                            case 'long':
                            case 'byte':
                            case 'int':
                                column = { type: 'numeric' };
                                break;

                            case 'date':
                            case 'time':
                            case 'datetime':
                                column = {
                                    type: 'date',
                                    dateFormat: dateFormat,
                                    defaultDate: null,
                                    showButtonPanel: true
                                };
                                break;

                            case 'bool':
                            case 'boolean':
                                column = {
                                    type: 'checkbox'
                                }
                                break;
                            default:
                                column = {};
                        }
                        return column;
                    });
                    var data = tfl.response[0];
                    if (data.length > 0) {
                        
                        var minutes = new Date().getTimezoneOffset();
                        for (var i = 0; i < data.length; i++) {
                            for (var y = 0; y < dateMap.length; y++) {
                                if (dateMap[y] == 1) {
                                    data[i][y] = $.datepicker.formatDate(dateFormat, addMinutes(new Date(data[i][y]), minutes));
                                }
                            }
                        }

                        $('#target').handsontable({
                            data: data,
                            minSpareRows: 1,
                            rowHeaders: true,
                            colHeaders: headers,
                            columnSorting: true,
                            contextMenu: true,
                            columns: columns,
                            manualColumnResize: true,
                            manualRowResize: true,
                        });
                    } else {
                        $('#target').handsontable({
                            startRows: 1,
                            startCols: headers.length,
                            minSpareRows: 1,
                            rowHeaders: true,
                            colHeaders: headers,
                            columnSorting: true,
                            contextMenu: true,
                            columns: columns,
                            manualColumnResize: true,
                            manualRowResize: true,
                    });
                    }
                    $().toastmessage('showSuccessToast', "Data Loaded");
                } else {
                    $().toastmessage('showErrorToast', tfl.message);
                }
            }, 'json');
        });

        $('#save').click(function () {
            var data = $('#target').data('handsontable').getData().slice().filter(function (item) {
                var nullCount = 0;
                for (i = 0; i < item.length; i++) {
                    if (item[i] == null) {
                        nullCount++;
                    }
                }
                return nullCount < item.length;
            });

            /*
            for (var i = 0; i < data.length; i++) {
                for (var y = 0; y < dateMap.length; y++) {
                    if (dateMap[y] == 1) {
                        data[i][y] = new Date(data[i][y]).toUTCString;
                    }
                }
            }*/

            $.ajax({
                url: settings.save,
                data: { "data": JSON.stringify(data), "__RequestVerificationToken": settings.token },
                type: 'POST',
                success: function (tfl) {
                    if (tfl.status === 200) {
                        $().toastmessage('showSuccessToast', "Data Saved");
                    } else {
                        $().toastmessage('showErrorToast', tfl.message);
                    }
                }
            });
        });

        $('#load').click();

    });
    // -->
</script>