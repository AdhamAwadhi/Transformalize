@model ConfigurationPart
@using Transformalize.Orchard.Models

@{
    var title = Model.Title();

    Script.Require("jQuery").AtHead();

    /* Resizing columns doesn't work if you use default jQuery */
    Script.Include("SlickGrid-2.1.0/lib/jquery-1.7.min.js").AtFoot();

    Script.Include("SlickGrid-2.1.0/lib/jquery-ui-1.8.16.custom.min.js").AtFoot();
    Script.Include("SlickGrid-2.1.0/lib/jquery.event.drag-2.2.min.js").AtFoot();
    Script.Include("SlickGrid-2.1.0/lib/jquery.event.drop-2.2.min.js").AtFoot();
    Script.Include("SlickGrid-2.1.0/slick.core.js").AtFoot();

    Script.Include("SlickGrid-2.1.0/plugins/slick.cellrangedecorator.js").AtFoot();
    Script.Include("SlickGrid-2.1.0/plugins/slick.cellrangeselector.js").AtFoot();
    Script.Include("SlickGrid-2.1.0/plugins/slick.cellselectionmodel.js").AtFoot();

    Script.Include("SlickGrid-2.1.0/slick.grid.js").AtFoot();
    Script.Include("SlickGrid-2.1.0/slick.formatters.min.js");
    Script.Include("SlickGrid-2.1.0/slick.editors.min.js");

    Script.Include("jquery.blockUI.min.js").AtFoot();
    Script.Include("jquery.toastmessage.min.js").AtFoot();

    Style.Include("jquery.toastmessage.min.css");
    Style.Include("SlickGrid-2.1.0/slick.grid.min.css");
    Style.Include("SlickGrid-2.1.0/css/smoothness/jquery-ui-1.8.16.custom.min.css");
    Style.Include("SlickGrid-2.1.0/slick-default-theme.min.css");

    Layout.Title = title;
}
<style>
    #target {
        -webkit-box-sizing: content-box;
        -moz-box-sizing: content-box;
        box-sizing: content-box;
        background: white;
        outline: 0;
    }

    #target div {
        -webkit-box-sizing: content-box;
        -moz-box-sizing: content-box;
        box-sizing: content-box;
    }

    .check-align {
        text-align: center;
    }
</style>

<h2>@(title)</h2>

<div >
    <button id="load" type="button" class="btn btn-warning btn-xs" style="margin-bottom: 7px;">
        <span class="glyphicon glyphicon-refresh"></span> Reload
    </button>

    <button id="save" type="button" class="btn btn-primary btn-xs" style="margin-bottom: 7px;" disabled="disabled">
        <span class="glyphicon glyphicon-floppy-save"></span> Save
    </button>
    
    <button id="autoedit" type="button" class="btn btn-default btn-xs" style="margin-bottom: 7px;">
        <span class="glyphicon glyphicon-edit"></span> Auto-Edit
    </button>

    <button id="undo" type="button" class="btn btn-danger btn-xs" style="margin-bottom: 7px;" disabled="disabled">
        <span class="glyphicon glyphicon-fire"></span> Undo
    </button>

</div>
<div id="target" style="width:800px; height:600px;"></div>

<script>
    //<!--
    var settings = {
        load: '@(Url.Action("Load", "SlickGrid", new { id = Model.Id }))',
        save: '@(Url.Action("Save", "SlickGrid", new { id = Model.Id }))',
        token: '@Html.AntiForgeryTokenValueOrchard()',
        dateFormat: 'yy-mm-dd'
    };

    function addMinutes(date, minutes) {
        return new Date(date.getTime() + minutes * 60000);
    }

    function requiredFieldValidator(value) {
        if (value == null || value == undefined || !value.length) {
            return { valid: false, msg: "This is a required field" };
        } else {
            return { valid: true, msg: null };
        }
    }

    var state = {
        grid:{},
        autoEdit: false,
        data: [],
        fields: [],
        commandQueue: [],
        dates: []
    };

    var defaultFormatter = function (row, cell, value, columnDef, dataContext) {
        return value;
    }

    function getSimpleType(systemType) {
        return systemType.toLowerCase().replace('system.', '');
    }

    function getEditor(type) {
        switch (getSimpleType(type)) {
            case 'int16':
            case 'int32':
            case 'int64':
            case 'short':
            case 'long':
            case 'byte':
            case 'int':
                return Slick.Editors.Integer;

            case 'double':
            case 'float':
            case 'decimal':
                return Slick.Editors.Text;

            case 'date':
            case 'time':
            case 'datetime':
                return Slick.Editors.Date;

            case 'bool':
            case 'boolean':
                return Slick.Editors.Checkbox;
            default:
                return Slick.Editors.Text;
        }
    };

    function queueAndExecuteCommand(item, column, editCommand) {
        if ($('#save').attr('disabled')) {
            $('#save').removeAttr('disabled');
        }
        if ($('#undo').attr('disabled')) {
            $('#undo').removeAttr('disabled');
        }
        state.commandQueue.push(editCommand);
        editCommand.execute();
    }

    $(document).ready(function () {

        $(document).ajaxStart(function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff',
                    baseZ: 1021
                }
            });
        });

        $(document).ajaxComplete(function () {
            $.unblockUI();
        });

        $(document).ajaxError(function (event, request) {
            $.unblockUI();
            $().toastmessage('showErrorToast', request.responseText);
        });

        $('#undo').click(function () {
            var command = state.commandQueue.pop();
            if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {
                command.undo();
                state.grid.gotoCell(command.row, command.cell, false);
                if (state.commandQueue.length == 0) {
                    $('#save').attr('disabled', 'disabled');
                    $('#undo').attr('disabled', 'disabled');
                }
            }
        });

        $('#autoedit').click(function () {
            if (state.autoEdit == true) {
                state.grid.setOptions({ autoEdit: false });
                state.autoEdit = false;
                $(this).removeClass('btn-success');
                $(this).addClass('btn-default');
            } else {
                state.grid.setOptions({ autoEdit: true });
                state.autoEdit = true;
                $(this).removeClass('btn-default');
                $(this).addClass('btn-success');
            }
        });

        $('#load').click(function () {
            $.get(settings.load, function (tfl) {
                if (tfl.status === 200) {

                    state.fields = tfl.processes[0].add.entities.add.fields.add.filter(function (f) {
                        return !f.hasOwnProperty('output') || f.output == true;
                    });

                    state.dates = state.fields.filter(function (f) {
                        return f.hasOwnProperty('type') && f.type.indexOf('date') == 0;
                    });

                    var columns = $.map(state.fields, function (f) {
                        var id = f.hasOwnProperty('alias') ? f.alias : f.name;
                        var hasType = f.hasOwnProperty('type');
                        var isBool = hasType && f.type.toLowerCase().indexOf('bool') == 0;
                        return {
                            id: id,
                            name: f.hasOwnProperty('label') ? f.label : id,
                            field: id,
                            resizable: true,
                            sortable: false,
                            formatter: isBool ? Slick.Formatters.Checkmark : defaultFormatter,
                            cssClass: isBool ? 'check-align' : '',
                            editor: hasType ? getEditor(f.type) : Slick.Editors.Text,
                        };
                    });

                    var options = {
                        editable: true,
                        enableAddRow: true,
                        autoEdit: state.autoEdit,
                        enableCellNavigation: true,
                        enableColumnReorder: true,
                        editCommandHandler: queueAndExecuteCommand
                    };

                    state.data = tfl.response[0];

                    var minutes = new Date().getTimezoneOffset();
                    for (var i = 0; i < state.data.length; i++) {
                        for (var y = 0; y < state.dates.length; y++) {
                            var key = state.dates[y].hasOwnProperty('alias') ? state.dates[y].alias : state.dates[y].name;
                            state.data[i][key] = $.datepicker.formatDate(settings.dateFormat, addMinutes(new Date(state.data[i][key]), minutes));
                        }
                    }

                    state.grid = new Slick.Grid("#target", state.data, columns, options);
                    state.grid.autosizeColumns();
                    state.grid.setSelectionModel(new Slick.CellSelectionModel());
                    state.grid.onAddNewRow.subscribe(function (e, args) {
                        var item = args.item;
                        state.grid.invalidateRow(state.data.length);
                        state.data.push(item);
                        state.grid.updateRowCount();
                        state.grid.render();
                    });

                    $().toastmessage('showSuccessToast', "Data Loaded");
                } else {
                    $().toastmessage('showErrorToast', tfl.message);
                }
            }, 'json');
        });

        $('#save').click(function () {

            $.ajax({
                url: settings.save,
                data: { "data": JSON.stringify(state.data), "__RequestVerificationToken": settings.token },
                type: 'POST',
                success: function (tfl) {
                    if (tfl.status === 200) {
                        $().toastmessage('showSuccessToast', "Data Saved");
                    } else {
                        $().toastmessage('showErrorToast', tfl.message);
                    }
                }
            });
        });

        $('#load').click();
    });
    // -->
</script>