this.recline=this.recline||{};this.recline.View=this.recline.View||{},function(n,t){"use strict";t.Grid=Backbone.View.extend({tagName:"div",className:"recline-grid-container",initialize:function(n){var i=this,t;_.bindAll(this,"render","onHorizontalScroll");this.listenTo(this.model.records,"add reset remove",this.render);this.tempState={};t=_.extend({hiddenFields:[]},n.state);this.state=new recline.Model.ObjectState(t)},events:{},setColumnSort:function(n){var t=[{}];t[0][this.tempState.currentColumn]={order:n};this.model.query({sort:t})},hideColumn:function(){var n=this.state.get("hiddenFields");n.push(this.tempState.currentColumn);this.state.set({hiddenFields:n});this.state.trigger("change");this.render()},showColumn:function(t){var i=_.without(this.state.get("hiddenFields"),n(t.target).data("column"));this.state.set({hiddenFields:i});this.render()},onHorizontalScroll:function(t){var i=n(t.target).scrollLeft();this.$el.find(".recline-grid thead tr").scrollLeft(i)},template:'     <div class="table-container">     <table class="recline-grid table-striped table-condensed" cellspacing="0">       <thead class="fixed-header">         <tr>           {{#fields}}             <th class="column-header {{#hidden}}hidden{{/hidden}}" data-field="{{id}}" style="width: {{width}}px; max-width: {{width}}px; min-width: {{width}}px;" title="{{label}}">               <span class="column-header-name">{{label}}<\/span>             <\/th>           {{/fields}}           <th class="last-header" style="width: {{lastHeaderWidth}}px; max-width: {{lastHeaderWidth}}px; min-width: {{lastHeaderWidth}}px; padding: 0; margin: 0;"><\/th>         <\/tr>       <\/thead>       <tbody class="scroll-content"><\/tbody>     <\/table>     <\/div>   ',toTemplateJSON:function(){var t=this,n=this.model.toJSON();return n.notEmpty=this.fields.length>0,n.fields=this.fields.map(function(n){return n.toJSON()}),n.lastHeaderWidth=this.scrollbarDimensions.width-2,n},render:function(){var i=this,o,f;this.fields=new recline.Model.FieldList(this.model.fields.filter(function(n){return _.indexOf(i.state.get("hiddenFields"),n.id)==-1}));this.scrollbarDimensions=this.scrollbarDimensions||this._scrollbarSize();var r=this.fields.length,e=i.$el.width()-20-10*r-this.scrollbarDimensions.width,u=parseInt(Math.max(50,e/r),10),s=Math.max(e-r*u,0);return this.fields.each(function(n,t){t===0?n.set({width:u+s}):n.set({width:u})}),o=Mustache.render(this.template,this.toTemplateJSON()),this.$el.html(o),this.model.records.forEach(function(r){var u=n("<tr />"),f;i.$el.find("tbody").append(u);f=new t.GridRow({model:r,el:u,fields:i.fields});f.render()}),f=this.$el.find("tbody")[0],f.scrollHeight<=f.offsetHeight&&this.$el.find("th.last-header").hide(),this.$el.find(".recline-grid").toggleClass("no-hidden",i.state.get("hiddenFields").length===0),this.$el.find(".recline-grid tbody").scroll(this.onHorizontalScroll),this},_scrollbarSize:function(){var t=n("<div style='position:absolute; top:-10000px; left:-10000px; width:100px; height:100px; overflow:scroll;'><\/div>").appendTo("body"),i={width:t.width()-t[0].clientWidth+1,height:t.height()-t[0].clientHeight};return t.remove(),i}});t.GridRow=Backbone.View.extend({initialize:function(n){_.bindAll(this,"render");this._fields=n.fields;this.listenTo(this.model,"change",this.render)},template:'       {{#cells}}       <td data-field="{{field}}" style="width: {{width}}px; max-width: {{width}}px; min-width: {{width}}px;">         <div class="data-table-cell-content">           <a href="javascript:{}" class="data-table-cell-edit" title="Edit this cell">&nbsp;<\/a>           <div class="data-table-cell-value">{{{value}}}<\/div>         <\/div>       <\/td>       {{/cells}}     ',events:{"click .data-table-cell-edit":"onEditClick","click .data-table-cell-editor .okButton":"onEditorOK","click .data-table-cell-editor .cancelButton":"onEditorCancel"},toTemplateJSON:function(){var i=this,n=this.model,t=this._fields.map(function(t){return{field:t.id,width:t.get("width"),value:n.getFieldValue(t)}});return{id:this.id,cells:t}},render:function(){this.$el.attr("data-id",this.model.id);var n=Mustache.render(this.template,this.toTemplateJSON());return this.$el.html(n),this},cellEditorTemplate:'     <div class="menu-container data-table-cell-editor">       <textarea class="data-table-cell-editor-editor" bind="textarea">{{value}}<\/textarea>       <div id="data-table-cell-editor-actions">         <div class="data-table-cell-editor-action">           <button class="okButton btn primary">Update<\/button>           <button class="cancelButton btn danger">Cancel<\/button>         <\/div>       <\/div>     <\/div>   ',onEditClick:function(t){var r=this.$el.find(".data-table-cell-editor-editor"),i,u;r.length>0&&r.parents(".data-table-cell-value").html(r.text()).siblings(".data-table-cell-edit").removeClass("hidden");n(t.target).addClass("hidden");i=n(t.target).siblings(".data-table-cell-value");i.data("previousContents",i.text());u=Mustache.render(this.cellEditorTemplate,{value:i.text()});i.html(u)},onEditorOK:function(t){var e=this,i=n(t.target),o=i.parents("tr").attr("data-id"),u=i.parents("td").attr("data-field"),f=i.parents(".data-table-cell-editor").find(".data-table-cell-editor-editor").val(),r={};r[u]=f;this.model.set(r);this.trigger("recline:flash",{message:"Updating row...",loader:!0});this.model.save().then(function(){this.trigger("recline:flash",{message:"Row updated successfully",category:"success"})}).fail(function(){this.trigger("recline:flash",{message:"Error saving row",category:"error",persist:!0})})},onEditorCancel:function(t){var i=n(t.target).parents(".data-table-cell-value");i.html(i.data("previousContents")).siblings(".data-table-cell-edit").removeClass("hidden")}})}(jQuery,recline.View);
//# sourceMappingURL=view.grid.min.js.map
