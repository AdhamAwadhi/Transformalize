this.recline=this.recline||{};this.recline.View=this.recline.View||{},function(n,t){"use strict";t.Map=Backbone.View.extend({template:'     <div class="recline-map">       <div class="panel map"><\/div>     <\/div> ',latitudeFieldNames:["lat","latitude"],longitudeFieldNames:["lon","longitude"],geometryFieldNames:["geojson","geom","the_geom","geometry","spatial","location","geo","lonlat"],initialize:function(n){var i=this,r;this.visible=!0;this.mapReady=!1;this.map=null;r=_.extend({geomField:null,lonField:null,latField:null,autoZoom:!0,cluster:!1},n.state);this.state=new recline.Model.ObjectState(r);this._clusterOptions={zoomToBoundsOnClick:!0,maxClusterRadius:80,singleMarkerMode:!1,skipDuplicateAddTesting:!0,animateAddingMarkers:!1};this.listenTo(this.model.fields,"change",function(){i._setupGeometryField();i.render()});this.listenTo(this.model.records,"add",function(n){i.redraw("add",n)});this.listenTo(this.model.records,"change",function(n){i.redraw("remove",n);i.redraw("add",n)});this.listenTo(this.model.records,"remove",function(n){i.redraw("remove",n)});this.listenTo(this.model.records,"reset",function(){i.redraw("reset")});this.menu=new t.MapMenu({model:this.model,state:this.state.toJSON()});this.listenTo(this.menu.state,"change",function(){i.state.set(i.menu.state.toJSON());i.redraw()});this.listenTo(this.state,"change",function(){i.redraw()});this.elSidebar=this.menu.$el},infobox:function(n){var i="";for(var t in n.attributes)this.state.get("geomField")&&t==this.state.get("geomField")||(i+="<div><strong>"+t+"<\/strong>: "+n.attributes[t]+"<\/div>");return i},geoJsonLayerOptions:{pointToLayer:function(n,t){var i=new L.Marker(t);return i.bindPopup(n.properties.popupContent),this.markers.addLayer(i),i},onEachFeature:function(n,t){n.properties&&n.properties.popupContent&&t.bindPopup(n.properties.popupContent)}},render:function(){var t=this,n=Mustache.render(this.template,this.model.toTemplateJSON());return this.$el.html(n),this.$map=this.$el.find(".panel.map"),this.redraw(),this},redraw:function(n,t){var i=this,r;n=n||"refresh";i._geomReady()||i._setupGeometryField();i.mapReady||i._setupMap();this._geomReady()&&this.mapReady&&(this.map.removeLayer(this.features),this.map.removeLayer(this.markers),r=0,this.features.eachLayer(function(){r++}),n=="refresh"||n=="reset"?(this.features.clearLayers(),this.map.removeLayer(this.markers),this.markers=new L.MarkerClusterGroup(this._clusterOptions),this._add(this.model.records.models)):n=="add"&&t?this._add(t):n=="remove"&&t&&this._remove(t),this.state.get("cluster")?this.map.addLayer(this.markers):this.map.addLayer(this.features),this.state.get("autoZoom")&&(this.visible?this._zoomToFeatures():this._zoomPending=!0))},show:function(){this.map&&(this.map.invalidateSize(),this._zoomPending&&this.state.get("autoZoom")&&(this._zoomToFeatures(),this._zoomPending=!1));this.visible=!0},hide:function(){this.visible=!1},_geomReady:function(){return Boolean(this.state.get("geomField")||this.state.get("latField")&&this.state.get("lonField"))},_add:function(n){var t=this,r,i;n instanceof Array||(n=[n]);r=0;i=0;_.every(n,function(n){var u,f;if(r+=1,u=t._getGeometryFromRecord(n),typeof u=="undefined"||u===null)return!0;if(u instanceof Object){u.properties={popupContent:t.infobox(n),cid:n.cid};try{t.features.addData(u)}catch(e){i+=1;f="Wrong geometry value";e.message&&(f+=" ("+e.message+")");i<=10&&t.trigger("recline:flash",{message:f,category:"error"})}}else i+=1,i<=10&&t.trigger("recline:flash",{message:"Wrong geometry value",category:"error"});return!0})},_remove:function(n){var t=this;n instanceof Array||(n=[n]);_.each(n,function(n){for(var i in t.features._layers)t.features._layers[i].feature.geometry.properties.cid==n.cid&&t.features.removeLayer(t.features._layers[i])})},_parseCoordinateString:function(n){if(typeof n!="string")return parseFloat(n);for(var r=n.split(/[^-?\.\d\w]+/),i=0,u=0,f=[1,60,3600],t=0;t<r.length;++t)isNaN(parseFloat(r[t]))||(i+=parseFloat(r[t])/f[u],u+=1);return n.match(/[SW]/)&&(i=-1*i),i},_getGeometryFromRecord:function(t){var i,u,r;if(this.state.get("geomField")){if(i=t.get(this.state.get("geomField")),typeof i=="string")try{i=n.parseJSON(i)}catch(e){}if(typeof i=="string"){i=i.replace("(","").replace(")","");var f=i.split(","),r=this._parseCoordinateString(f[0]),u=this._parseCoordinateString(f[1]);return isNaN(u)||isNaN(parseFloat(r))?null:{type:"Point",coordinates:[u,r]}}return i&&_.isArray(i)?{type:"Point",coordinates:[i[0],i[1]]}:i&&i.lat?{type:"Point",coordinates:[i.lon||i.lng,i.lat]}:i}return this.state.get("lonField")&&this.state.get("latField")&&(u=t.get(this.state.get("lonField")),r=t.get(this.state.get("latField")),u=this._parseCoordinateString(u),r=this._parseCoordinateString(r),!isNaN(parseFloat(u))&&!isNaN(parseFloat(r)))?{type:"Point",coordinates:[u,r]}:null},_setupGeometryField:function(){this._geomReady()||(this.state.set({geomField:this._checkField(this.geometryFieldNames),latField:this._checkField(this.latitudeFieldNames),lonField:this._checkField(this.longitudeFieldNames)}),this.menu.state.set(this.state.toJSON()))},_checkField:function(n){for(var t,i=this.model.fields.pluck("id"),r=0;r<n.length;r++)for(t=0;t<i.length;t++)if(i[t].toLowerCase()==n[r].toLowerCase())return i[t];return null},_zoomToFeatures:function(){var n=this.features.getBounds();n&&n.getNorthEast()&&n.getSouthWest()?this.map.fitBounds(n):this.map.setView([0,0],2)},_setupMap:function(){var t=this;this.map=new L.Map(this.$map.get(0));var n=new L.TileLayer("http://otile{s}-s.mqcdn.com/tiles/1.0.0/osm/{z}/{x}/{y}.png",{maxZoom:18,attribution:'Map data &copy; 2011 OpenStreetMap contributors, Tiles Courtesy of <a href="http://www.mapquest.com/" target="_blank">MapQuest<\/a> <img src="http://developer.mapquest.com/content/osm/mq_logo.png">',subdomains:"1234"});this.map.addLayer(n);this.markers=new L.MarkerClusterGroup(this._clusterOptions);this.geoJsonLayerOptions.pointToLayer=_.bind(this.geoJsonLayerOptions.pointToLayer,this);this.features=new L.GeoJSON(null,this.geoJsonLayerOptions);this.map.setView([0,0],2);this.mapReady=!0},_selectOption:function(t,i){var r=n("."+t+" > select > option");r&&r.each(function(){if(this.value==i)return n(this).attr("selected","selected"),!1})}});t.MapMenu=Backbone.View.extend({className:"editor",template:'     <form class="form-stacked">       <div class="clearfix">         <div class="editor-field-type">             <label class="radio">               <input type="radio" id="editor-field-type-latlon" name="editor-field-type" value="latlon" checked="checked"/>               Latitude / Longitude fields<\/label>             <label class="radio">               <input type="radio" id="editor-field-type-geom" name="editor-field-type" value="geom" />               GeoJSON field<\/label>         <\/div>         <div class="editor-field-type-latlon">           <label>Latitude field<\/label>           <div class="input editor-lat-field">             <select>             <option value=""><\/option>             {{#fields}}             <option value="{{id}}">{{label}}<\/option>             {{/fields}}             <\/select>           <\/div>           <label>Longitude field<\/label>           <div class="input editor-lon-field">             <select>             <option value=""><\/option>             {{#fields}}             <option value="{{id}}">{{label}}<\/option>             {{/fields}}             <\/select>           <\/div>         <\/div>         <div class="editor-field-type-geom" style="display:none">           <label>Geometry field (GeoJSON)<\/label>           <div class="input editor-geom-field">             <select>             <option value=""><\/option>             {{#fields}}             <option value="{{id}}">{{label}}<\/option>             {{/fields}}             <\/select>           <\/div>         <\/div>       <\/div>       <div class="editor-buttons">         <button class="btn editor-update-map">Update<\/button>       <\/div>       <div class="editor-options" >         <label class="checkbox">           <input type="checkbox" id="editor-auto-zoom" value="autozoom" checked="checked" />           Auto zoom to features<\/label>         <label class="checkbox">           <input type="checkbox" id="editor-cluster" value="cluster"/>           Cluster markers<\/label>       <\/div>       <input type="hidden" class="editor-id" value="map-1" />     <\/form>   ',events:{"click .editor-update-map":"onEditorSubmit","change .editor-field-type":"onFieldTypeChange","click #editor-auto-zoom":"onAutoZoomChange","click #editor-cluster":"onClusteringChange"},initialize:function(n){var t=this;_.bindAll(this,"render");this.listenTo(this.model.fields,"change",this.render);this.state=new recline.Model.ObjectState(n.state);this.listenTo(this.state,"change",this.render);this.render()},render:function(){var t=this,n=Mustache.render(this.template,this.model.toTemplateJSON());return this.$el.html(n),this._geomReady()&&this.model.fields.length&&(this.state.get("geomField")?(this._selectOption("editor-geom-field",this.state.get("geomField")),this.$el.find("#editor-field-type-geom").attr("checked","checked").change()):(this._selectOption("editor-lon-field",this.state.get("lonField")),this._selectOption("editor-lat-field",this.state.get("latField")),this.$el.find("#editor-field-type-latlon").attr("checked","checked").change())),this.state.get("autoZoom")?this.$el.find("#editor-auto-zoom").attr("checked","checked"):this.$el.find("#editor-auto-zoom").removeAttr("checked"),this.state.get("cluster")?this.$el.find("#editor-cluster").attr("checked","checked"):this.$el.find("#editor-cluster").removeAttr("checked"),this},_geomReady:function(){return Boolean(this.state.get("geomField")||this.state.get("latField")&&this.state.get("lonField"))},onEditorSubmit:function(n){return n.preventDefault(),this.$el.find("#editor-field-type-geom").attr("checked")?this.state.set({geomField:this.$el.find(".editor-geom-field > select > option:selected").val(),lonField:null,latField:null}):this.state.set({geomField:null,lonField:this.$el.find(".editor-lon-field > select > option:selected").val(),latField:this.$el.find(".editor-lat-field > select > option:selected").val()}),!1},onFieldTypeChange:function(n){n.target.value=="geom"?(this.$el.find(".editor-field-type-geom").show(),this.$el.find(".editor-field-type-latlon").hide()):(this.$el.find(".editor-field-type-geom").hide(),this.$el.find(".editor-field-type-latlon").show())},onAutoZoomChange:function(){this.state.set({autoZoom:!this.state.get("autoZoom")})},onClusteringChange:function(){this.state.set({cluster:!this.state.get("cluster")})},_selectOption:function(t,i){var r=this.$el.find("."+t+" > select > option");r&&r.each(function(){if(this.value==i)return n(this).attr("selected","selected"),!1})}})}(jQuery,recline.View);
//# sourceMappingURL=view.map.min.js.map
