this.recline=this.recline||{};this.recline.View=this.recline.View||{},function(n,t){"use strict";t.ValueFilter=Backbone.View.extend({className:"recline-filter-editor well",template:'     <div class="filters">       <h3>Filters<\/h3>       <button class="btn js-add-filter add-filter">Add filter<\/button>       <form class="form-stacked js-add" style="display: none;">         <fieldset>           <label>Field<\/label>           <select class="fields">             {{#fields}}             <option value="{{id}}">{{label}}<\/option>             {{/fields}}           <\/select>           <button type="submit" class="btn">Add<\/button>         <\/fieldset>       <\/form>       <form class="form-stacked js-edit">         {{#filters}}           {{{filterRender}}}         {{/filters}}         {{#filters.length}}         <button type="submit" class="btn update-filter">Update<\/button>         {{/filters.length}}       <\/form>     <\/div>   ',filterTemplates:{term:'       <div class="filter-{{type}} filter">         <fieldset>           {{field}}           <a class="js-remove-filter" href="#" title="Remove this filter" data-filter-id="{{id}}">&times;<\/a>           <input type="text" value="{{term}}" name="term" data-filter-field="{{field}}" data-filter-id="{{id}}" data-filter-type="{{type}}" />         <\/fieldset>       <\/div>     '},events:{"click .js-remove-filter":"onRemoveFilter","click .js-add-filter":"onAddFilterShow","submit form.js-edit":"onTermFiltersUpdate","submit form.js-add":"onAddFilter"},initialize:function(){_.bindAll(this,"render");this.listenTo(this.model.fields,"all",this.render);this.listenTo(this.model.queryState,"change change:filters:new-blank",this.render);this.render()},render:function(){var r=this,t=n.extend(!0,{},this.model.queryState.toJSON()),i;t.filters=_.map(t.filters,function(n,t){return n.id=t,n});t.fields=this.model.fields.toJSON();t.filterRender=function(){return Mustache.render(r.filterTemplates.term,this)};i=Mustache.render(this.template,t);this.$el.html(i)},updateFilter:function(t){var r=this,u=r.model.queryState.get("filters"),i=n(t),f=parseInt(i.attr("data-filter-id"),10),e=i.val();u[f].term=e},onAddFilterShow:function(t){t.preventDefault();var i=n(t.target);i.hide();this.$el.find("form.js-add").show()},onAddFilter:function(t){var i,r;t.preventDefault();i=n(t.target);i.hide();r=i.find("select.fields").val();this.model.queryState.addFilter({type:"term",field:r})},onRemoveFilter:function(t){t.preventDefault();var i=n(t.target),r=i.attr("data-filter-id");this.model.queryState.removeFilter(r)},onTermFiltersUpdate:function(t){var i=this,r,u;t.preventDefault();r=i.model.queryState.get("filters");u=n(t.target);_.each(u.find("input"),function(n){i.updateFilter(n)});i.model.queryState.set({filters:r,from:0});i.model.queryState.trigger("change")}})}(jQuery,recline.View);
//# sourceMappingURL=widget.valuefilter.min.js.map
