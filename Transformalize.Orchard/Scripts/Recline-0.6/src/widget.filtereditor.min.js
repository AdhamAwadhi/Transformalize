this.recline=this.recline||{};this.recline.View=this.recline.View||{},function(n,t){"use strict";t.FilterEditor=Backbone.View.extend({className:"recline-filter-editor well",template:'     <div class="filters">       <h3>Filters<\/h3>       <a href="#" class="js-add-filter">Add filter<\/a>       <form class="form-stacked js-add" style="display: none;">         <fieldset>           <label>Field<\/label>           <select class="fields">             {{#fields}}             <option value="{{id}}">{{label}}<\/option>             {{/fields}}           <\/select>           <label>Filter type<\/label>           <select class="filterType">             <option value="term">Value<\/option>             <option value="range">Range<\/option>             <option value="geo_distance">Geo distance<\/option>           <\/select>           <button type="submit" class="btn">Add<\/button>         <\/fieldset>       <\/form>       <form class="form-stacked js-edit">         {{#filters}}           {{{filterRender}}}         {{/filters}}         {{#filters.length}}         <button type="submit" class="btn">Update<\/button>         {{/filters.length}}       <\/form>     <\/div>   ',filterTemplates:{term:'       <div class="filter-{{type}} filter">         <fieldset>           <legend>             {{field}} <small>{{type}}<\/small>             <a class="js-remove-filter" href="#" title="Remove this filter" data-filter-id="{{id}}">&times;<\/a>           <\/legend>           <input type="text" value="{{term}}" name="term" data-filter-field="{{field}}" data-filter-id="{{id}}" data-filter-type="{{type}}" />         <\/fieldset>       <\/div>     ',range:'       <div class="filter-{{type}} filter">         <fieldset>           <legend>             {{field}} <small>{{type}}<\/small>             <a class="js-remove-filter" href="#" title="Remove this filter" data-filter-id="{{id}}">&times;<\/a>           <\/legend>           <label class="control-label" for="">From<\/label>           <input type="text" value="{{from}}" name="from" data-filter-field="{{field}}" data-filter-id="{{id}}" data-filter-type="{{type}}" />           <label class="control-label" for="">To<\/label>           <input type="text" value="{{to}}" name="to" data-filter-field="{{field}}" data-filter-id="{{id}}" data-filter-type="{{type}}" />         <\/fieldset>       <\/div>     ',geo_distance:'       <div class="filter-{{type}} filter">         <fieldset>           <legend>             {{field}} <small>{{type}}<\/small>             <a class="js-remove-filter" href="#" title="Remove this filter" data-filter-id="{{id}}">&times;<\/a>           <\/legend>           <label class="control-label" for="">Longitude<\/label>           <input type="text" value="{{point.lon}}" name="lon" data-filter-field="{{field}}" data-filter-id="{{id}}" data-filter-type="{{type}}" />           <label class="control-label" for="">Latitude<\/label>           <input type="text" value="{{point.lat}}" name="lat" data-filter-field="{{field}}" data-filter-id="{{id}}" data-filter-type="{{type}}" />           <label class="control-label" for="">Distance (km)<\/label>           <input type="text" value="{{distance}}" name="distance" data-filter-field="{{field}}" data-filter-id="{{id}}" data-filter-type="{{type}}" />         <\/fieldset>       <\/div>     '},events:{"click .js-remove-filter":"onRemoveFilter","click .js-add-filter":"onAddFilterShow","submit form.js-edit":"onTermFiltersUpdate","submit form.js-add":"onAddFilter"},initialize:function(){_.bindAll(this,"render");this.listenTo(this.model.fields,"all",this.render);this.listenTo(this.model.queryState,"change change:filters:new-blank",this.render);this.render()},render:function(){var r=this,t=n.extend(!0,{},this.model.queryState.toJSON()),i;t.filters=_.map(t.filters,function(n,t){return n.id=t,n});t.fields=this.model.fields.toJSON();t.filterRender=function(){return Mustache.render(r.filterTemplates[this.type],this)};i=Mustache.render(this.template,t);this.$el.html(i)},onAddFilterShow:function(t){t.preventDefault();var i=n(t.target);i.hide();this.$el.find("form.js-add").show()},onAddFilter:function(t){var i,r,u;t.preventDefault();i=n(t.target);i.hide();r=i.find("select.filterType").val();u=i.find("select.fields").val();this.model.queryState.addFilter({type:r,field:u})},onRemoveFilter:function(t){t.preventDefault();var i=n(t.target),r=i.attr("data-filter-id");this.model.queryState.removeFilter(r)},onTermFiltersUpdate:function(t){var r=this,i,u;t.preventDefault();i=r.model.queryState.get("filters");u=n(t.target);_.each(u.find("input"),function(t){var r=n(t),o=r.attr("data-filter-type"),s=r.attr("data-filter-field"),u=parseInt(r.attr("data-filter-id"),10),e=r.attr("name"),f=r.val();switch(o){case"term":i[u].term=f;break;case"range":i[u][e]=f;break;case"geo_distance":e==="distance"?i[u].distance=parseFloat(f):i[u].point[e]=parseFloat(f)}});r.model.queryState.set({filters:i,from:0});r.model.queryState.trigger("change")}})}(jQuery,recline.View);
//# sourceMappingURL=widget.filtereditor.min.js.map
