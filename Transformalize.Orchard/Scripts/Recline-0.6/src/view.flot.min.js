this.recline=this.recline||{};this.recline.View=this.recline.View||{},function(n,t){"use strict";t.Flot=Backbone.View.extend({template:'     <div class="recline-flot">       <div class="panel graph" style="display: block;">         <div class="js-temp-notice alert alert-block">           <h3 class="alert-heading">Hey there!<\/h3>           <p>There\'s no graph here yet because we don\'t know what fields you\'d like to see plotted.<\/p>           <p>Please tell us by <strong>using the menu on the right<\/strong> and a graph will automatically appear.<\/p>         <\/div>       <\/div>     <\/div> ',initialize:function(n){var i=this,r;this.graphColors=["#edc240","#afd8f8","#cb4b4b","#4da74d","#9440ed"];_.bindAll(this,"render","redraw","_toolTip","_xaxisLabel");this.needToRedraw=!1;this.listenTo(this.model,"change",this.render);this.listenTo(this.model.fields,"reset add",this.render);this.listenTo(this.model.records,"reset add",this.redraw);r=_.extend({group:null,series:[],graphType:"lines-and-points"},n.state);this.state=new recline.Model.ObjectState(r);this.previousTooltipPoint={x:null,y:null};this.editor=new t.FlotControls({model:this.model,state:this.state.toJSON()});this.listenTo(this.editor.state,"change",function(){i.state.set(i.editor.state.toJSON());i.redraw()});this.elSidebar=this.editor.$el},render:function(){var i=this,n=this.model.toTemplateJSON(),t=Mustache.render(this.template,n);this.$el.html(t);this.$graph=this.$el.find(".panel.graph");this.$graph.on("plothover",this._toolTip);return this},remove:function(){this.editor.remove();Backbone.View.prototype.remove.apply(this,arguments)},redraw:function(){var r=!jQuery.expr.filters.hidden(this.el),t,i;if(!r||this.model.records.length===0){this.needToRedraw=!0;return}this.state.get("group")&&this.state.get("series")&&(t=this.createSeries(),i=this.getGraphOptions(this.state.attributes.graphType,t[0].data.length),this.plot=n.plot(this.$graph,t,i))},show:function(){this.needToRedraw&&this.redraw()},_toolTip:function(t,i,r){var e,o,s,u,f;r?(this.previousTooltipPoint.x!==r.dataIndex||this.previousTooltipPoint.y!==r.seriesIndex)&&(this.previousTooltipPoint.x=r.dataIndex,this.previousTooltipPoint.y=r.seriesIndex,n("#recline-flot-tooltip").remove(),e=r.datapoint[0].toFixed(2),o=r.datapoint[1].toFixed(2),this.state.attributes.graphType==="bars"&&(e=r.datapoint[1].toFixed(2),o=r.datapoint[0].toFixed(2)),s=_.template("<%= group %> = <%= x %>, <%= series %> = <%= y %>",{group:this.state.attributes.group,x:this._xaxisLabel(e),series:r.series.label,y:o}),this.state.attributes.graphType==="bars"?(u=r.pageX+15,f=r.pageY-10):this.state.attributes.graphType==="columns"?(u=r.pageX+15,f=r.pageY):(u=r.pageX+10,f=r.pageY-20),n('<div id="recline-flot-tooltip">'+s+"<\/div>").css({top:f,left:u}).appendTo("body").fadeIn(200)):(n("#recline-flot-tooltip").remove(),this.previousTooltipPoint.x=null,this.previousTooltipPoint.y=null)},_xaxisLabel:function(n){return this._groupFieldIsDateTime()?n=new Date(parseFloat(n)).toLocaleDateString():this.xvaluesAreIndex&&(n=parseInt(n,10),n=this.model.records.models[n].get(this.state.attributes.group)),n},getGraphOptions:function(n){var f=this,s=f._groupFieldIsDateTime(),i={},e,r,u,t,o;if(s||(i.tickFormatter=function(n){var t=f._xaxisLabel(n)||"";return typeof t!="string"&&(t=t.toString()),f.state.attributes.graphType!=="bars"&&t.length>10&&(t=t.slice(0,10)+"..."),t}),this.xvaluesAreIndex){var h=Math.min(this.model.records.length,15),l=this.model.records.length/h,c=[];for(e=0;e<h;e++)c.push(parseInt(e*l,10));i.ticks=c}else s&&(i.mode="time");return r={},r.autoscale=!0,r.autoscaleMargin=.02,u={},u.position="ne",t={},t.hoverable=!0,t.clickable=!0,t.borderColor="#aaaaaa",t.borderWidth=1,o={lines:{legend:u,colors:this.graphColors,lines:{show:!0},xaxis:i,yaxis:r,grid:t},points:{legend:u,colors:this.graphColors,points:{show:!0,hitRadius:5},xaxis:i,yaxis:r,grid:t},"lines-and-points":{legend:u,colors:this.graphColors,points:{show:!0,hitRadius:5},lines:{show:!0},xaxis:i,yaxis:r,grid:t},bars:{legend:u,colors:this.graphColors,lines:{show:!1},xaxis:r,yaxis:i,grid:t,bars:{show:!0,horizontal:!0,shadowSize:0,align:"center",barWidth:.8}},columns:{legend:u,colors:this.graphColors,lines:{show:!1},xaxis:i,yaxis:r,grid:t,bars:{show:!0,horizontal:!1,shadowSize:0,align:"center",barWidth:.8}}},f.state.get("graphOptions")?_.extend(o[n],f.state.get("graphOptions")):o[n]},_groupFieldIsDateTime:function(){var t=this.model.fields.get(this.state.attributes.group),n=t.get("type");return n==="date"||n==="date-time"||n==="time"},createSeries:function(){var n=this;n.xvaluesAreIndex=!1;var t=[],i=n.model.fields.get(n.state.attributes.group),r=n._groupFieldIsDateTime();return _.each(this.state.attributes.series,function(u){var f=[],s=n.model.fields.get(u).get("label"),o,e;r?e=function(n){var t=moment(String(n));return t.isValid()&&(n=t.toDate().getTime()),n}:(o=_.map(n.model.records.models,function(n){return n.getFieldValueUnrendered(i)}),_.all(o,function(n){return!isNaN(parseFloat(n))})?e=function(n){return parseFloat(n)}:n.xvaluesAreIndex=!0);_.each(n.model.records.models,function(t,r){var o,h,s;o=n.xvaluesAreIndex?r:e(t.getFieldValueUnrendered(i));h=n.model.fields.get(u);s=t.getFieldValueUnrendered(h);n.state.attributes.graphType=="bars"?f.push([s,o]):f.push([o,s])});t.push({data:f,label:s,hoverable:!0})}),t}});t.FlotControls=Backbone.View.extend({className:"editor",template:'   <div class="editor">     <form class="form-stacked">       <div class="clearfix">         <label>Graph Type<\/label>         <div class="input editor-type">           <select>           <option value="lines-and-points">Lines and Points<\/option>           <option value="lines">Lines<\/option>           <option value="points">Points<\/option>           <option value="bars">Bars<\/option>           <option value="columns">Columns<\/option>           <\/select>         <\/div>         <label>Group Column (Axis 1)<\/label>         <div class="input editor-group">           <select>           <option value="">Please choose ...<\/option>           {{#fields}}           <option value="{{id}}">{{label}}<\/option>           {{/fields}}           <\/select>         <\/div>         <div class="editor-series-group">         <\/div>       <\/div>       <div class="editor-buttons">         <button class="btn editor-add">Add Series<\/button>       <\/div>       <div class="editor-buttons editor-submit" comment="hidden temporarily" style="display: none;">         <button class="editor-save">Save<\/button>         <input type="hidden" class="editor-id" value="chart-1" />       <\/div>     <\/form>   <\/div> ',templateSeriesEditor:'     <div class="editor-series js-series-{{seriesIndex}}">       <label>Series <span>{{seriesName}} (Axis 2)<\/span>         [<a href="#remove" class="action-remove-series">Remove<\/a>]       <\/label>       <div class="input">         <select>         {{#fields}}         <option value="{{id}}">{{label}}<\/option>         {{/fields}}         <\/select>       <\/div>     <\/div>   ',events:{"change form select":"onEditorSubmit","click .editor-add":"_onAddSeries","click .action-remove-series":"removeSeries"},initialize:function(n){var t=this;_.bindAll(this,"render");this.listenTo(this.model.fields,"reset add",this.render);this.state=new recline.Model.ObjectState(n.state);this.render()},render:function(){var t=this,i=this.model.toTemplateJSON(),r=Mustache.render(this.template,i),n;return this.$el.html(r),this.state.get("graphType")&&this._selectOption(".editor-type",this.state.get("graphType")),this.state.get("group")&&this._selectOption(".editor-group",this.state.get("group")),n=[""],this.state.get("series").length>0&&(n=this.state.get("series")),_.each(n,function(n,i){t.addSeries(i);t._selectOption(".editor-series.js-series-"+i,n)}),this},_selectOption:function(t,i){var r=this.$el.find(t+" select > option");r&&r.each(function(){if(this.value==i)return n(this).attr("selected","selected"),!1})},onEditorSubmit:function(){var u=this.$el.find(".editor-group select"),f=this,t=this.$el.find(".editor-series select"),i=t.map(function(){return n(this).val()}),r={series:n.makeArray(i),group:this.$el.find(".editor-group select").val(),graphType:this.$el.find(".editor-type select").val()};this.state.set(r)},addSeries:function(n){var t=_.extend({seriesIndex:n,seriesName:String.fromCharCode(n+64+1)},this.model.toTemplateJSON()),i=Mustache.render(this.templateSeriesEditor,t);return this.$el.find(".editor-series-group").append(i),this},_onAddSeries:function(n){n.preventDefault();this.addSeries(this.state.get("series").length)},removeSeries:function(t){t.preventDefault();var i=n(t.target);i.parent().parent().remove();this.onEditorSubmit()}})}(jQuery,recline.View);
//# sourceMappingURL=view.flot.min.js.map
