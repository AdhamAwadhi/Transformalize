@using Orchard
@using Orchard.ContentManagement
@using Orchard.Core.Contents
@using Transformalize.Configuration
@using Pipeline.Web.Orchard
@using Pipeline.Web.Orchard.Services
@using Pipeline.Web.Orchard.Models
@using Pipeline.Web.Orchard.Services.Contracts

@model ReportViewModel
@{
    var output = Request["output"] ?? "page";
    var settings = WorkContext.CurrentSite.As<PipelineSettingsPart>();
    var entity = Model.Process.Entities.FirstOrDefault() ?? new Entity { Name = "Missing Entity" };
    var allFields = entity.GetAllFields().Where(f => !f.System).ToArray();
    var hasCoordinates = allFields.Any(f => f.Alias.StartsWith("lat", StringComparison.OrdinalIgnoreCase)) && allFields.Any(f => f.Alias.StartsWith("lon", StringComparison.OrdinalIgnoreCase));
    var orchard = WorkContext.Resolve<IOrchardServices>();
    var sortService = WorkContext.Resolve<ISortService>();
    var linkService = WorkContext.Resolve<IExportLinkService>();
    var hasParameters = Model.Process.Environments.Any(e => e.Parameters.Any(p => p.Prompt));
    var pageSizes = new [] {5, 10, 15, 25, 50, 100};
    var hasActions = Model.Process.Actions.Any(a => !a.Before && !a.After && !string.IsNullOrEmpty(a.Description) && !a.Description.StartsWith("Batch", StringComparison.OrdinalIgnoreCase));

    if (hasActions) {
        var bv = allFields.FirstOrDefault(f => f.Alias == Common.BatchValueFieldName);
        if (bv == null) {
            hasActions = false;
        } else {
            bv.Output = false;
        }
    }

    Style.Require("jQueryUI_Orchard");
    Script.Require("jQuery").AtHead();
    Script.Require("jQueryUI").AtHead();
    Script.Include("jquery.tablesorter.min.js");
    Script.Include("https://cdnjs.cloudflare.com/ajax/libs/bootstrap-multiselect/0.9.13/js/bootstrap-multiselect.min.js");

    if (output == "page") {
        Script.Include("https://cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shCore.min.js");
        Script.Include("https://cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushXml.min.js");
        Script.Include("https://cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushJScript.min.js");
        Script.Include("https://cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushSql.min.js");
        if (hasActions) {
            Script.Require("BlockUI");
        }
    }

    Style.Include("https://cdnjs.cloudflare.com/ajax/libs/bootstrap-multiselect/0.9.13/css/bootstrap-multiselect.css");

    if (output == "page") {
        Style.Include("tablesorter.css");
        Style.Include("https://cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/styles/shCore.min.css");
        Style.Include("https://cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/styles/shCoreDefault.min.css");
    }

    if (hasCoordinates && !string.IsNullOrEmpty(settings.MapBoxToken) && output == "map") {
        Script.Include("https://api.mapbox.com/mapbox.js/v3.0.1/mapbox.js");
        Style.Include("https://api.mapbox.com/mapbox.js/v3.0.1/mapbox.css");
    }

    var exportCsvLink = linkService.Create(Request, "csv");
    var exportXlsxLink = linkService.Create(Request, "xlsx");

    var fields = entity.GetAllOutputFields().Where(f => !f.System && f.Alias != Common.BatchValueFieldName).ToArray();
    var isSortable = fields.Any(f => f.Sortable == "true");
    var activeParameters = Model.Process.GetActiveParameters();

    AppendMeta("description", entity.Alias, ",");
    Layout.Title = entity.Alias;
}

<style>
    .btn-sort {
        background-color: #dbdbdb;
        border-color: #d2d1d1;
        color: #727272;
    }

    .btn-xs, .btn-group-xs > .btn {
        border-radius: 3px;
        font-size: 9px;
        line-height: 1.5;
    }

    td.sorter .btn-xs {
        font-size: 7px !important;
    }

    td.sorter {
        padding: 0 3px 3px 4px !important;
    }

    button.multiselect {
        -ms-border-bottom-left-radius: 0 !important;
        border-bottom-left-radius: 0 !important;
        -ms-border-top-left-radius: 0 !important;
        border-top-left-radius: 0 !important;
    }

    #busy {
        position: fixed;
        left: 46%;
        top: 40%;
        display: none;
        background: transparent url(@Url.Content("~/Modules/Pipeline.Web.Orchard/Styles/busy.gif"));
        background-size: 149px 149px;
        background-repeat:no-repeat;
        z-index: 1020;
        height: 150px;
        width: 150px;
    }

    #busy-holder {
        background: transparent;
        width: 100%;
        height: 100%;
    }

    .form-inline .multiselect-container label.checkbox, .form-inline .multiselect-container label.radio {
        padding: 0px 20px 0px 40px;
    }

</style>

<div class="row">
    <div class="col-sm-8" style="text-align: left; font-size: larger; font-weight: bold;">@entity.Alias</div>
    @if (entity.Hits > 0) {
        <div class="col-sm-4 hint" style="text-align: right;">@entity.Hits Hits in @Model.Process.Time ms</div>
    } else {
        <div class="col-sm-4 hint" style="text-align: right;">@Model.Process.Time ms</div>
    }
</div>

@foreach (var error in Model.Process.Errors()) {
    <div class="alert alert-danger" role="alert">@error</div>
}

@foreach (var warning in Model.Process.Warnings()) {
    <div class="alert alert-warning" role="alert">@warning</div>
}

<form id="id_report" class="form-inline" role="form" method="GET">

    <input id="id_sort" class="bsh" type="hidden" name="sort" value="@(Request["sort"] ?? string.Empty)" />
    @if ((Request.QueryString[Common.InputFileIdName] ?? "0") != "0") {
        <input id="id_file" class="bsh" type="hidden" name="@(Common.InputFileIdName)" value="@(Request.QueryString[Common.InputFileIdName])" />
    }
    <input id="id_page" class="bsh" type="hidden" name="page" value="@entity.Page" />
    <input id="id_size" class="bsh" type="hidden" name="size" value="@(entity.Size)" />
    <input id="id_output" class="bsh" type="hidden" name="output" value="@(output == "page" ? string.Empty : output)" />

    @foreach (var parameter in activeParameters.Where(p => !p.Prompt && Request.QueryString[p.Name] != null).Select(p => p.Name)) {
        <input type="hidden" name="@parameter" value="@(Request.QueryString[parameter])" />
    }

    <div class="row" style="margin-bottom: 4px;">

        <div class="col-md-@(entity.Pagination.Pages > 0 ? 8 : 10)">

            @if (hasParameters) {

                <button id="id_clear" type="button" class="btn btn-info btn-sm">Clear</button>

                var parameters = activeParameters.Where(p => p.Prompt).ToArray();

                foreach (var parameter in parameters) {
                    <div class="form-group form-group-sm">
                        <label class="sr-only" for="@parameter.Name">@parameter.Label</label>
                        <div class="input-group input-group-sm" style="padding-top: 2px;">
                            <span class="input-group-addon">@parameter.Label</span>
                            @switch (parameter.Type) {
                                case "date":
                                case "datetime":
                                    var requestedDate = Request.QueryString[parameter.Name] ?? (string.IsNullOrEmpty(parameter.Value) ? DateTime.Now.ToString("yyyy-MM-dd") : parameter.Value);
                                    <input class="form-control date"
                                           size="10"
                                           type="datetime"
                                           name="@parameter.Name"
                                           placeholder="@parameter.Label"
                                           value="@requestedDate"
                                           @(Html.Raw(parameter.Width > 0 ? "style=\"width:" + parameter.Width + "px\"" : string.Empty)) />
                                    break;
                                default:
                                    var requestedValue = Request.QueryString[parameter.Name] ?? parameter.Value;
                                    if (string.IsNullOrEmpty(parameter.Map)) {
                                        <input class="form-control"
                                               name="@parameter.Name"
                                               value="@requestedValue"
                                               placeholder="@parameter.Label"
                                               @(Html.Raw(parameter.Width > 0 ? "style=\"width:" + parameter.Width + "px\"" : string.Empty)) />
                                    } else {
                                        <select class="form-control"
                                                size="1"
                                                multiple="@(parameter.Multiple)"
                                                name="@parameter.Name"
                                                @(Html.Raw(parameter.Width > 0 ? "style=\"width:" + parameter.Width + "px\"" : string.Empty))>
                                            @{
                                                var items = Model.Process.Maps.First(m => m.Name == parameter.Map).Items;
                                                if (parameter.Multiple) {
                                                    var values = Request.QueryString[parameter.Name] == null ? new HashSet<string>() : new HashSet<string>(Request.QueryString.GetValues(parameter.Name));
                                                    foreach (var item in items) {
                                                        <option value="@item.To" selected="@(values.Contains(item.To.ToString()))">@item.From</option>
                                                    }
                                                } else {
                                                    <option value="*" selected="@(requestedValue == "*")">ALL</option>
                                                    foreach (var item in items) {
                                                        <option value="@item.To" selected="@(item.To.ToString() == requestedValue)">@item.From</option>
                                                    }
                                                }
                                            }
                                        </select>
                                    }
                                    break;
                                }
                        </div>
                    </div>
                    }
                }

            <button id="id_submit" type="submit" class="btn btn-primary btn-sm">
                <span class="glyphicon glyphicon-@(hasParameters ? "search":"refresh")"></span>
            </button>

        </div>

        <div class="col-md-@(entity.Pagination.Pages > 0 ? 4 : 2)">

            @if (entity.Page > 0 && output != "map") {
                <ul class="pagination pagination-sm" style="display: inline;">
                    @if (entity.Pagination.HasPrevious) {
                        <li><a href="javascript:controls.submit(@entity.Pagination.First)"><span class="glyphicon glyphicon-step-backward"></span></a></li>
                        <li><a href="javascript:controls.submit(@entity.Pagination.Previous)"><span class="glyphicon glyphicon-chevron-left"></span></a></li>
                    } else {
                        <li class="disabled"><a href="#"><span class="glyphicon glyphicon-step-backward"></span></a></li>
                        <li class="disabled"><a href="#"><span class="glyphicon glyphicon-chevron-left"></span></a></li>
                    }
                    <!-- (@entity.Hits) -->
                    <li class="disabled"><a href="#">Page <strong>@entity.Page</strong> of @entity.Pagination.Pages</a></li>

                    @if (entity.Pagination.HasNext) {
                        <li><a href="javascript:controls.submit(@entity.Pagination.Next)"><span class="glyphicon glyphicon-chevron-right"></span></a></li>
                        <li><a href="javascript:controls.submit(@entity.Pagination.Last)"><span class="glyphicon glyphicon-step-forward"></span></a></li>
                    } else {
                        <li class="disabled"><a href="#"><span class="glyphicon glyphicon-chevron-right"></span></a></li>
                        <li class="disabled"><a href="#"><span class="glyphicon glyphicon-step-forward"></span></a></li>
                    }
                </ul>
            }

            <div class="btn-group pull-right">

                @if (hasActions) {
                    <div class="btn-group">
                        <button type="button" class="btn btn-sm btn-danger">Action</button>
                        <button type="button" class="btn btn-sm btn-danger dropdown-toggle" data-toggle="dropdown">
                            <span class="caret"></span>
                            <span class="sr-only">Toggle Dropdown</span>
                        </button>
                        <ul class="dropdown-menu" role="menu">
                            @foreach (var action in Model.Process.Actions.Where(a => !a.Before && !a.After && !string.IsNullOrEmpty(a.Description) && !a.Description.StartsWith("Batch", StringComparison.OrdinalIgnoreCase))) {
                                <li>
                                    <a class="bulk-action-link" rel="@action.Description" href="javascript:bulkAction(1,'@action.Description',@action.Id);">@action.Description</a>
                                </li>
                            }
                        </ul>
                    </div>
                }

                @if (orchard.Authorizer.Authorize(Permissions.EditContent)) {
                    <button title="edit this report" type="button" class="btn btn-warning btn-sm" onclick="window.open('@(Url.Content("~/Admin/Contents/Edit/" + Model.Part.Id + "?" + Common.ReturnUrlName + "=" + Url.Encode(Request.RawUrl)))', '_self');">
                        <span class="glyphicon glyphicon-edit"></span>
                    </button>
                }

                @if (output == "page" && hasCoordinates && !string.IsNullOrEmpty(settings.MapBoxToken) && entity.Hits <= settings.MapBoxLimit) {
                    <button title="view on map" type="button" class="btn btn-success btn-sm" onclick="window.open('@(linkService.Create(Request,"map"))', '_self');">
                        <span class="glyphicon glyphicon-map-marker"></span>
                    </button>
                }

                @if (output == "map") {
                    <button title="back to data" type="button" class="btn btn-success btn-sm" onclick="window.open('@(linkService.Create(Request,"page"))', '_self');">
                        <span class="glyphicon glyphicon-align-justify"></span>
                    </button>
                }

                <div class="btn-group">
                    <button class="btn btn-sm btn-info">
                        <span class="glyphicon glyphicon-floppy-disk"></span>
                    </button>
                    <button class="btn dropdown-toggle btn-sm btn-info" data-toggle="dropdown">
                        <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu">
                        <li><a href="javascript:window.open('@exportCsvLink', '_self');" title="Excel, Notepad, etc.">CSV</a></li>
                        <li><a href="javascript:window.open('@exportXlsxLink', '_self');" title="Excel">XLSX</a></li>
                        @{
                            if (hasCoordinates) {
                                var exportGeoJsonLink = linkService.Create(Request, "geojson");
                                var exportKmlLink = linkService.Create(Request, "kml");
                                <li><a href="javascript:window.open('@exportGeoJsonLink', '_self');" title="geojson.io, etc.">GEOJSON</a></li>
                                <li><a href="javascript:window.open('@exportKmlLink', '_self');" title="Google Earth, etc.">KML</a></li>
                            }
                        }
                    </ul>
                </div>

                @if (output == "page" && entity.Page > 0) {
                    <div class="btn-group">
                        <button class="btn btn-sm">Size</button>
                        <button class="btn dropdown-toggle btn-sm" data-toggle="dropdown">
                            <span class="caret"></span>
                        </button>
                        <ul class="dropdown-menu">
                            @foreach (var pageSize in pageSizes) {
                                <li class="@(entity.Size.Equals(pageSize) ? "active" : string.Empty)">
                                    <a href="javascript:controls.setSize(@pageSize);">@pageSize</a>
                                </li>
                            }
                        </ul>
                    </div>
                }
            </div>
        </div>
    </div>

    @if (output == "page") {
        <div class="row">
            <div class="table-responsive col-sm-12">
                <table id="id_table" class="table table-condensed table-hover table-striped tablesorter">
                    <thead>
                        <tr style="font-size: smaller; font-weight: bolder;">
                            @if (hasActions) {
                                <td>
                                    <div class="checkbox">
                                        <label>
                                            <input title="Select the entire search result" id="select-all" type="checkbox" class="bulk-action" name="select-all" placeholder="Select the entire search result">
                                        </label>
                                    </div>
                                </td>
                            }
                            @foreach (var field in fields) {
                                <td title="@field.Name">@field.Label</td>
                            }
                        </tr>
                        @if (isSortable) {
                            var expression = Request["sort"] ?? string.Empty;
                            <tr>
                                @if (hasActions) {
                                    <td class="sorter">&nbsp;</td>
                                }
                                @for (var i = 0; i < fields.Length; i++) {
                                    var field = fields[i];
                                    var number = i + 1;
                                    if (field.Sortable == "true") {
                                        <td class="sorter" data-order-by="@(number)">
                                            <div class="btn-group btn-group-xs" style="width: 37px;">
                                                <a href="javascript:void()" class="btn btn-xs @(sortService.Sort(number, expression) == Direction.Asc ? "btn-primary" : "btn-sort") sortable">
                                                    <span class="glyphicon glyphicon-chevron-up"></span>
                                                </a>
                                                <a href="javascript:void()" class="btn btn-xs @(sortService.Sort(number, expression) == Direction.Desc ? "btn-primary" : "btn-sort") sortable">
                                                    <span class="glyphicon glyphicon-chevron-down"></span>
                                                </a>
                                            </div>
                                        </td>
                                    } else {
                                        <td style="padding: 0 3px 3px 1px;">&nbsp;</td>
                                    }
                                }
                            </tr>
                        }
                    </thead>
                    <tbody>
                        @foreach (var row in entity.Rows) {
                            <tr>
                                @if (hasActions) {
                                    <td>
                                        <div class="checkbox">
                                            <label>
                                                <input title="Select this row"
                                                       type="checkbox"
                                                       class="bulk-action shift-select"
                                                       name="row"
                                                       value="@(row[Common.BatchValueFieldName])"
                                                       placeholder="Select Record">
                                            </label>
                                        </div>
                                    </td>
                                }

                                @foreach (var field in fields) {
                                    <td>
                                        @switch (field.Type) {
                                            case "bool":
                                            case "boolean":
                                                if ((bool)row[field.Alias]) {
                                                    <span style="color: #73a839;" class="glyphicon glyphicon-ok"></span>
                                                } else {
                                                    <span style="color: #c71c22;" class="glyphicon glyphicon-remove"></span>
                                                }
                                                break;
                                            case "date":
                                            case "datetime":
                                                if (field.Format == string.Empty) {
                                                    @(row[field.Alias])
                                                } else {
                                                    if (row[field.Alias] is DateTime) {
                                                        @(((DateTime)row[field.Alias]).ToString(field.Format))
                                                    } else {
                                                        @((Convert.ToDateTime(row[field.Alias])).ToString(field.Format))
                                                    }
                                                }
                                                break;
                                            case "byte[]":
                                                @Transformalize.Utility.BytesToHexString(row[field.Alias] as byte[])
                                                break;
                                            case "single":
                                            case "double":
                                            case "decimal":
                                            case "float":
                                                if (field.Format == string.Empty) {
                                                    @(row[field.Alias])
                                                } else {
                                                    switch (field.Type) {
                                                        case "single":
                                                        case "float":
                                                            @(row[field.Alias] is float ? ((float)row[field.Alias]).ToString(field.Format) : Convert.ToSingle(row[field.Alias]).ToString(field.Format))
                                                            break;
                                                        case "decimal":
                                                            @(row[field.Alias] is decimal ? ((decimal)row[field.Alias]).ToString(field.Format) : Convert.ToDecimal(row[field.Alias]).ToString(field.Format))
                                                            break;
                                                        case "double":
                                                            @(row[field.Alias] is double ? ((double)row[field.Alias]).ToString(field.Format) : Convert.ToDouble(row[field.Alias]).ToString(field.Format))
                                                            break;
                                                        default:
                                                            @(row[field.Alias])
                                                            break;
                                                    }

                                                }
                                                break;
                                            default:
                                                @(field.Raw ? Html.Raw(row[field.Alias]) : row[field.Alias])
                                                break;

                                        }
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
                            }

    @if (output == "map") {
        if (!string.IsNullOrEmpty(settings.MapBoxToken) && entity.Hits <= settings.MapBoxLimit) {
            <div id="id_map" style="height: 650px; width: 100%"></div>
            <script>
                //<!--
                $(document).ready(function() {

                    $('#id_map').height(Math.round($(window).height() * .7));

                    L.mapbox.accessToken = '@(settings.MapBoxToken)';

                    var map = L.mapbox.map('id_map', null);
                    var layers = {};
                    layers["Streets"] = L.mapbox.tileLayer("mapbox.streets-basic");
                    layers["Streets"].addTo(map);
                    layers["Satellite"] = L.mapbox.tileLayer("mapbox.streets-satellite");

                    L.control.layers(layers).addTo(map);

                    var url = '@(linkService.Create(Request, "geojson"))';

                    var layer = L.mapbox.featureLayer().loadURL(url).addTo(map);

                    $('#busy').show();

                    layer.on('error', function(err) {
                        $('#busy').hide();
                        console.log(err);
                        alert("See console for error(s).");
                    });

                    layer.on('ready', function() {
                        // featureLayer.getBounds() returns the corners of the furthest-out markers,
                        // and map.fitBounds() makes sure that the map contains these.
                        map.fitBounds(layer.getBounds());
                        $('#busy').hide();
                    });


                });
                //-->
            </script>
        } else {
            <div class="row">
                <div class="col-sm-12">
                    <div class="alert alert-danger" role="alert">You may not plot more than @(settings.MapBoxLimit) points.  Your query is returning @entity.Hits points.</div>
                </div>
            </div>
        }

    }

</form>

<div id="busy_holder">
    <div id="busy"></div>
</div>

<script type="text/javascript">
    //<!--

    var controls = {
        setPage: function(page) {
            $('#id_page').val(page);
        },
        submit: function(page) {
            controls.setPage(page);
            $("#id_report").submit();
        },
        setSize: function(size) {
            $('#id_size').val(size);
            controls.submit(1);
        },
        setSort: function(sort) {
            $('#id_sort').val(sort);
        },
        lastChecked : null,
        bulkActionLength: 0
    }

    function bulkAction(page,description,id) {
        var length = $('.bulk-action:checked').length;
        if (length > 0) {
            $.blockUI({
                message: null,
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff',
                    baseZ: 1021
                }
            });
            var $form = $('#id_report');
            $form.attr('method', 'POST');
            $form.append('<input type="hidden" name="__RequestVerificationToken" value="@(@Html.AntiForgeryTokenValueOrchard())" />');
            $form.append('<input type="hidden" name="action" value="'+description+'" />');
            $form.append('<input type="hidden" name="actionId" value="'+id+'" />');
            $form.append('<input type="hidden" name="count" value="'+controls.bulkActionLength+'" />');
            $('#id_output').val("batch");
            controls.submit(page);
        }
    }

    function updateBulkActions() {
        var length = $(".bulk-action:checked").length;
        var all = length === $(".bulk-action").length;
        $(".bulk-action-link").each(function () {
            var link = $(this);
            var len = (all ? "All" : $('#select-all:checked').length > 0 ? length - 1 : length);
            controls.bulkActionLength =  len;
            link.html(link.attr('rel') + '&nbsp;&nbsp;<span class="badge">' + len + "</span>");
        });
    }

    $(document).ready(function() {

        function removeMessages() {
            $(".zone-messages").fadeOut();
        }
        setTimeout(removeMessages, 5000);

        var $boxes = $('.shift-select');
        $boxes.click(function(e) {
            if(!controls.lastChecked) {
                controls.lastChecked = this;
                return;
            }

            if(e.shiftKey) {
                var start = $boxes.index(this);
                var end = $boxes.index(controls.lastChecked);

                $boxes.slice(Math.min(start,end), Math.max(start,end)+ 1).prop('checked', controls.lastChecked.checked);

            }

            controls.lastChecked = this;
        });

        var isSortable = @(isSortable.ToString().ToLower());
        var defaultSize = @(pageSizes.FirstOrDefault());

        $('#id_report select').multiselect({
            enableFiltering: true,
            enableCaseInsensitiveFiltering: true,
            onChange: function () {
                controls.setPage(1);
                if (!this.$select[0].multiple) {
                    controls.submit(1);
                }
            },
            maxHeight: 400,
            nonSelectedText: 'ALL',
            nSelectedText: 'Selected',
            allSelectedText: 'Selected',
            buttonContainer: '<div class="btn-group btn-group-sm" />',
            templates: {
                filter: '<li class="multiselect-item filter"><div class="input-group input-group-sm"><span class="input-group-addon"><i class="glyphicon glyphicon-search"></i></span><input class="form-control multiselect-search" type="text"></div></li>',
            }
        });
        $('span.multiselect-selected-text').parent().removeClass('btn-default');
        $('span.multiselect-selected-text').not('span.multiselect-selected-text:contains("ALL")').parent().addClass('btn-info');

        // enable client side sorting if server side support is off
        if (!isSortable) {
            $("#id_table").tablesorter();
            $("#id_table")
                .bind("sortStart", function() {
                    $('#busy').show();
                })
                .bind("sortEnd", function() {
                    $('#busy').hide();
                });
        }

        $(".form-control.date").datepicker({ dateFormat: "yy-mm-dd" });

        $('#id_report').bind('submit', function(e) {

            // stop double submit
            $('#id_submit').prop('disabled', true);

            // the rest of this just cleans up the URL (bookmark)
            var page = parseInt($('#id_page').val());

            if (page <= 1) {
                $('#id_page').attr('disabled', true);
            }

            $('#id_report input').filter(function() {
                var value = $(this).val();
                return value === "*" || value === "";
            }).attr('disabled',true);

            $("#id_report select").each(function() {
                var selected = $('option:selected', this);
                var count = selected.length;
                if (count === 0) {
                    $(this).attr('disabled', true);
                } else if (count === 1) {
                    var value = $(selected[0]).val();
                    if (value === "" || value === "*") {
                        $(this).attr('disabled', true);
                    }
                }
            });

            $('#busy').show();

            // normal submit handler fires
            return true;
        });

        $('#id_clear').click(function() {

            // set single select back to first
            $('#id_report select:not([multiple])').val($('#id_report select option:first').val());

            // set multi-select to none
            $('#id_report select[multiple]').multiselect('deselectAll', false);
            $('#id_report select[multiple]').multiselect('updateButtonText');

            // set other inputs to blank
            $('#id_report input:visible').val("");

            controls.submit(@(entity.Page == 0 ? 0 : 1));
        });

        $('.sortable').click(function() {
            $(this).toggleClass('btn-sort').toggleClass('btn-primary');

            $(this).siblings().each(function(i) {
                if ($(this).hasClass('btn-primary')) {
                    $(this).removeClass('btn-primary').addClass('btn-sort');
                }
            });

            var sort = '';
            $('td.sorter').each(function(i) {
                var field = $(this).attr('data-order-by');
                if (field) {
                    var index = 0;
                    $('a', $(this)).each(function(j) {
                        if ($(this).hasClass('btn-primary')) {
                            switch (index) {
                                case 0:
                                    sort += field + 'a.';
                                    break;
                                case 1:
                                    sort += field + 'd.';
                                    break;
                                default:
                                    break;
                            }
                        }
                        index++;
                    });
                }
            });
            var expression = sort.replace(/^\.+|\.+$/gm, '');
            console.log(expression);
            controls.setSort(expression);
            controls.submit(@(entity.Page == 0 ? 0 : 1));
        });

        $(":checkbox[name=select-all]").click(function () {
            $(":checkbox[name=row]").prop("checked", this.checked);
            updateBulkActions();
        });

        $(":checkbox[name=row]").click(function () {
            updateBulkActions();
        });

    });

    //-->
</script>

@if (output == "page") {
    <script type="text/javascript">
        //<!--
        $(document).ready(function() {
            SyntaxHighlighter.all();
        });
        //-->
    </script>
}



