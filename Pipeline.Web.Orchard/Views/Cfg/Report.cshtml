@using FluentNHibernate.Utils
@using Orchard
@using Orchard.Core.Contents
@using Pipeline.Configuration
@using Pipeline.Context
@using Pipeline.Logging
@using Pipeline.Transforms
@using Pipeline.Web.Orchard
@using Pipeline.Web.Orchard.Services
@using Pipeline.Web.Orchard.Models

@model ReportViewModel
@{
    Style.Require("jQueryUI_Orchard");
    Script.Require("jQuery").AtHead();
    Script.Require("jQueryUI").AtHead();
    Script.Include("https://cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shCore.min.js");
    Script.Include("https://cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushXml.min.js");
    Script.Include("https://cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushJScript.min.js");

    Style.Include("https://cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/styles/shCore.min.css");
    Style.Include("https://cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/styles/shCoreDefault.min.css");

    var orchard = WorkContext.Resolve<IOrchardServices>();
    var sortService = WorkContext.Resolve<ISortService>();
    var hasParameters = Model.Process.Environments.Any(e => e.Parameters.Any(p => p.Prompt));
    var optionsDisplayed = false;
    var exportLink = Request.RawUrl.Contains("?") ? Request.RawUrl + "&output=csv" : Request.RawUrl + "?output=csv";

    AppendMeta("description", Model.Process.Name, ",");
    Layout.Title = Model.Process.Name;
}

<style type="text/css">
.btn-sort {
    background-color: #dbdbdb;
    border-color: #d2d1d1;
    color: #727272;
}

.btn-xs, .btn-group-xs > .btn {
    border-radius: 3px;
    font-size: 9px;
    line-height: 1.5;
}

th.sorter .btn-xs {
    font-size: 7px !important;
}

th.sorter {
    padding: 0 3px 3px 4px !important;
}

#busy {
    position: fixed;
    left: 46%;
    top: 40%;
    display: none;
    background: transparent url(@Url.Content("~/Modules/Pipeline.Web.Orchard/Styles/busy.gif"));
    background-size: 149px 149px;
    background-repeat:no-repeat;
    z-index: 1020;
    height: 150px;
    width: 150px;
}

#busy-holder {
    background: transparent;
    width: 100%;
    height: 100%;
}

</style>

@if (hasParameters) {
    <h3>@Model.Part.Title()</h3>
}

@foreach (var error in Model.Process.Errors()) {
    <div class="alert alert-danger" role="alert">@error</div>
}

@foreach (var warning in Model.Process.Warnings()) {
    <div class="alert alert-warning" role="alert">@warning</div>
}

<form id="id_report" class="form-inline" role="form" method="GET">

    <input id="id_sort" type="hidden" name="sort" value="@(Request["sort"] ?? string.Empty)" />
    <input type="hidden" name="@(Common.InputFileIdName)" value="@(Request.QueryString[Common.InputFileIdName])"/>

    @foreach (var parameter in Model.Process.GetActiveParameters().Where(p => !p.Prompt && Request.QueryString[p.Name] != null).Select(p => p.Name)) {
        <input type="hidden" name="@parameter" value="@(Request.QueryString[parameter])"/>
    }

    @if (hasParameters) {

        <button type="button"
                onclick="$('#id_report select').val($('#id_report select option:first').val()); controls.submit(1);"
                class="btn btn-info btn-sm">
            Clear
        </button>

        var parameters = Model.Process.GetActiveParameters().Where(p => p.Prompt).ToArray();

        foreach (var parameter in parameters) {
            <div class="form-group form-group-sm">
                <label class="sr-only" for="@parameter.Name">@parameter.Label</label>
                <div class="input-group input-group-sm">
                    <div class="input-group-addon">@parameter.Label</div>
                    @switch (parameter.Type) {
                        case "date":
                        case "datetime":
                            var requestedDate = Request.QueryString[parameter.Name] ?? (string.IsNullOrEmpty(parameter.Value) ? DateTime.Now.ToString("yyyy-MM-dd") : parameter.Value);
                            <input class="form-control date"
                                   type="datetime"
                                   name="@parameter.Name"
                                   placeholder="@parameter.Label"
                                   onchange="controls.submit(1);"
                                   value="@requestedDate" />
                            break;
                        default:
                            var requestedValue = Request.QueryString[parameter.Name] ?? parameter.Value;
                            if (string.IsNullOrEmpty(parameter.Map)) {
                                <input class="form-control"
                                       name="@parameter.Name"
                                       value="@requestedValue" 
                                       placeholder="@parameter.Label" />
                            } else {
                                <select class="form-control"
                                        onchange="controls.submit(1);" 
                                        name="@parameter.Name">
                                    @foreach (var item in Model.Process.Maps.First(m => m.Name == parameter.Map).Items) {
                                        <option value="@item.To" selected="@(item.To.ToString() == requestedValue)">@item.From</option>
                                    }
                                </select>
                            }
                            break;
                    }
                </div>
            </div>
        }
        <button id="id_submit" type="submit" class="btn btn-warning btn-sm">Submit</button>

        <div class="btn-group pull-right" role="group" aria-label="...">
            @{ optionsDisplayed = true; }
            @if (orchard.Authorizer.Authorize(Permissions.EditContent)) {
                <button title="edit this report" type="button" class="btn btn-success btn-sm" onclick="window.open('@(Url.Content("~/Admin/Contents/Edit/" + Model.Part.Id + "?" + Common.ReturnUrlName + "=" + Url.Encode(Request.RawUrl)))', '_self');">
                    <span class="glyphicon glyphicon-edit"></span>
                </button>
            }
            <button title="export these results" type="button" class="btn btn-info btn-sm" onclick="window.open('@exportLink', '_self');">
                <span class="glyphicon glyphicon-floppy-save"></span>
            </button>
            <button title="view other reports" type="button" class="btn btn-warning btn-sm" onclick="window.open('@(@Url.Action("List", "Cfg", new {tagFilter = "REPORT"}))', '_self');">
                <span class="glyphicon glyphicon-th-list"></span>
            </button>
        </div>

    }

    @foreach (var entity in Model.Process.Entities) {
        var fields = entity.GetAllOutputFields().Where(f => !f.System).ToArray();

        if (entity.Page > 0) {
            <input id="id_page" type="hidden" name="page" value="@entity.Page" />
            <input id="id_size" type="hidden" name="size" value="@entity.PageSize" />

                    <div class="row">

                        <div class="col-md-4"><strong style="font-size: larger;">@(hasParameters ? " " : Model.Process.Name)</strong></div>

                        <div class="col-md-4">
                            <ul class="pagination pagination-sm" style="display: inline;">
                                @if (entity.Pagination.HasPrevious) {
                                    <li><a href="javascript:controls.submit(@entity.Pagination.First)"><span class="glyphicon glyphicon-step-backward"></span></a></li>
                                    <li><a href="javascript:controls.submit(@entity.Pagination.Previous)"><span class="glyphicon glyphicon-chevron-left"></span></a></li>
                                } else {
                                    <li class="disabled"><a href="#"><span class="glyphicon glyphicon-step-backward"></span></a></li>
                                    <li class="disabled"><a href="#"><span class="glyphicon glyphicon-chevron-left"></span></a></li>
                                }

                                <li class="disabled"><a href="#">@entity.Hits found, Page <strong>@entity.Page</strong> of @entity.Pagination.Pages</a></li>

                                @if (entity.Pagination.HasNext) {
                                    <li><a href="javascript:controls.submit(@entity.Pagination.Next)"><span class="glyphicon glyphicon-chevron-right"></span></a></li>
                                    <li><a href="javascript:controls.submit(@entity.Pagination.Last)"><span class="glyphicon glyphicon-step-forward"></span></a></li>
                                } else {
                                    <li class="disabled"><a href="#"><span class="glyphicon glyphicon-chevron-right"></span></a></li>
                                    <li class="disabled"><a href="#"><span class="glyphicon glyphicon-step-forward"></span></a></li>
                                }
                            </ul>
                        </div>

                        <div class="col-md-4">

                            @if (entity.PageSizes.Any()) {
                                <div class="btn-group pull-right">
                                    @if (!optionsDisplayed) {
                                        if (orchard.Authorizer.Authorize(Permissions.EditContent)) {
                                            <button title="edit this report" type="button" class="btn btn-success btn-sm" onclick="window.open('@(Url.Content("~/Admin/Contents/Edit/" + Model.Part.Id + "?" + Common.ReturnUrlName + "=" + Url.Encode(Request.RawUrl)))', '_self');">
                                                <span class="glyphicon glyphicon-edit"></span>
                                            </button>
                                        }
                                        <button title="export these results" type="button" class="btn btn-info btn-sm" onclick="window.open('@Request.RawUrl' + '&output=csv', '_self');">
                                            <span class="glyphicon glyphicon-floppy-save"></span>
                                        </button>
                                        <button title="view other reports" type="button" class="btn btn-warning btn-sm" onclick="window.open('@(@Url.Action("List", "Cfg", new {tagFilter = "REPORT"}))', '_self');">
                                            <span class="glyphicon glyphicon-th-list"></span>
                                        </button>
                                    }
                                    <div class="btn-group">
                                        <button class="btn btn-sm">Page Size</button>
                                        <button class="btn dropdown-toggle btn-sm" data-toggle="dropdown">
                                            <span class="caret"></span>
                                        </button>
                                        <ul class="dropdown-menu">
                                            @foreach (var pageSize in entity.PageSizes.Select(s => s.Size)) {
                                                if (entity.PageSize.Equals(pageSize)) {
                                                    <li class="active">
                                                        <a href="javascript:controls.setSize(@pageSize);submit(1);">@pageSize</a>
                                                    </li>
                                                } else {
                                                    <li>
                                                        <a href="javascript:controls.setSize(@pageSize);submit(1);">@pageSize</a>
                                                    </li>
                                                }
                                            }
                                        </ul>
                                    </div>
                                </div>
                            } else {
                                if (!optionsDisplayed) {
                                    <div class="btn-group pull-right">
                                        if (orchard.Authorizer.Authorize(Permissions.EditContent)) {
                                        <button title="edit this report" type="button" class="btn btn-success btn-sm" onclick="window.open('@(Url.Content("~/Admin/Contents/Edit/" + Model.Part.Id + "?" + Common.ReturnUrlName + "=" + Url.Encode(Request.RawUrl)))', '_self');">
                                            <span class="glyphicon glyphicon-edit"></span>
                                        </button>
                                        }
                                        <button title="export these results" type="button" class="btn btn-info btn-sm" onclick="window.open('@Request.RawUrl' + '&output=csv', '_self');">
                                            <span class="glyphicon glyphicon-floppy-save"></span>
                                        </button>
                                        <button title="view other reports" type="button" class="btn btn-warning btn-sm" onclick="window.open('@(@Url.Action("List", "Cfg", new {tagFilter = "REPORT"}))', '_self');">
                                            <span class="glyphicon glyphicon-th-list"></span>
                                        </button>
                                    </div>
                                }else {
                                    <span> </span>   
                                }
                            }
                    </div>
                </div>
        }

        <div class="row">
            <div class="table-responsive col-sm-12">
                <table class="table table-condensed table-hover table-striped">
                    <thead>
                        <tr>
                            @foreach (var field in fields) {
                                <th>@field.Label</th>
                            }
                        </tr>
                        @if (fields.Any(f => f.Sortable == "true")) {
                            var expression = Request["sort"] ?? string.Empty;
                            <tr>
                                @for (var i = 0; i < fields.Length; i++) {
                                    var field = fields[i];
                                    var number = i + 1;
                                    if (field.Sortable == "true") {
                                        <th class="sorter" data-order-by="@(number)">
                                            <div aclass="btn-group btn-group-xs">
                                                <a href="javascript:void()" class="btn btn-xs @(sortService.Sort(number, expression) == Direction.Asc ? "btn-primary" : "btn-sort") sortable">
                                                    <span class="glyphicon glyphicon-chevron-up"></span>
                                                </a>
                                                <a href="javascript:void()" class="btn btn-xs @(sortService.Sort(number, expression) == Direction.Desc ? "btn-primary" : "btn-sort") sortable">
                                                    <span class="glyphicon glyphicon-chevron-down"></span>
                                                </a>
                                            </div>
                                        </th>
                                    } else {
                                        <th style="padding: 0 3px 3px 1px;">&nbsp;</th>
                                    }
                                }
                            </tr>
                        }
                    </thead>
                    <tbody>
                    @{
                        Map classMap = null;
                        var mapField = fields.LastOrDefault(f => f.ClassMap != string.Empty);
                        if (mapField != null) {
                            classMap = Model.Process.Maps.FirstOrDefault(m => m.Name == mapField.ClassMap);
                        }
                    }

                    @foreach (var row in entity.Rows) {

                        var classValue = string.Empty;
                        if (classMap != null) {
                            var value = mapField.Convert(row[mapField.Alias]);
                            var valueComparable = value as IComparable;
                            if (valueComparable != null) {
                                foreach (var item in classMap.Items) {
                                    var from = mapField.Convert(item.From);
                                    var to = mapField.Convert(item.To);
                                    if (valueComparable.CompareTo(from) >= 0 && valueComparable.CompareTo(to) <= 0) {
                                        classValue = item.Value;
                                    }
                                }
                                if (classValue == string.Empty) {
                                    var defaultItem = classMap.Items.FirstOrDefault(i => i.From.Equals("*"));
                                    if (defaultItem != null) {
                                        classValue = defaultItem.Value;
                                    }
                                }
                            }
                        }

                        <tr class="@classValue">
                            @foreach (var field in fields) {
                                <td>
                                    @if (field.Type.StartsWith("bool")) {
                                        if ((bool) row[field.Alias]) {
                                            <span style="color: #73a839;" class="glyphicon glyphicon-ok"></span>
                                        }
                                        else {
                                            <span style="color: #c71c22;" class="glyphicon glyphicon-remove"></span>
                                        }
                                    }
                                    else {
                                        @(field.Raw ? Html.Raw(row[field.Alias]) : row[field.Alias])
                                    }
                                </td>
                            }
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    }
</form>

<div id="busy_holder">
    <div id="busy"></div>
</div>

<script type="text/javascript">
    //<!--

    var controls = {
        setPage: function (page) {
            $('#id_page').val(page);
        },
        submit : function(page) {
            controls.setPage(page);
            $("#id_report").submit();
        },
        setSize: function(size) {
            $('#id_size').val(size);
        },
        setSort: function(sort) {
            $('#id_sort').val(sort);
        }
    }

    $(document).ready(function () {

        $('.form-control.date').datepicker({ dateFormat: 'yy-mm-dd'});

        $('#id_report').bind('submit', function(e) {
            $('#id_submit').prop('disabled', true);
            $('#busy').show();
        });

        $('.sortable').click(function () {
            $(this).toggleClass('btn-sort').toggleClass('btn-primary');

            $(this).siblings().each(function (i) {
                if ($(this).hasClass('btn-primary')) {
                    $(this).removeClass('btn-primary').addClass('btn-sort');
                }
            });

            var sort = '';
            $('th.sorter').each(function (i) {
                var field = $(this).attr('data-order-by');
                if (field) {
                    var index = 0;
                    $('a', $(this)).each(function (j) {
                        if ($(this).hasClass('btn-primary')) {
                            switch (index) {
                                case 0:
                                    sort += field + 'a.';
                                    break;
                                case 1:
                                    sort += field + 'd.';
                                    break;
                                default:
                                    break;
                            }
                        }
                        index++;
                    });
                }
            });
            var expression = sort.replace(/^\.+|\.+$/gm, '');
            console.log(expression);
            controls.setSort(expression);
            controls.submit(1);
        });

        SyntaxHighlighter.all();

    });

    //-->
</script>





