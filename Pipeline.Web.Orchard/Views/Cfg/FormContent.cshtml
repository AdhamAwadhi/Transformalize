@using Transformalize
@using System.Linq
@using Orchard.ContentManagement
@using Pipeline.Web.Orchard.Models
@using Transformalize.Configuration
@using Transformalize.Impl
@model Transformalize.Configuration.Process
@{
    string focus = string.Empty;
    CfgRow row = null;
    Field[] fields = null;
    bool valid = false;

    var request = WorkContext.HttpContext.Request;
    var method = request.HttpMethod;
    var entity = Model.Entities.FirstOrDefault();

    if (entity != null) {
        row = entity.Rows.FirstOrDefault();
        fields = entity.Fields.Where(f => f.Input).ToArray();

        // determine focus
        if (method == "GET") {
            focus = fields.First(f => !f.PrimaryKey).Alias;
        } else {
            var previous = fields.First(f => f.Name == request.Form["form_focus"]);
            var maxIndex = fields.Where(f => !f.PrimaryKey).Max(f => f.Index);
            if (previous.Index < maxIndex) {
                focus = fields.First(f => f.Index == previous.Index + 1).Alias;
            } else {
                var invalid = fields.FirstOrDefault(f => f.ValidField != string.Empty && !(bool)row[f.ValidField]);
                focus = invalid == null ? "submit" : invalid.Alias;
            }
        }

        valid = entity.ValidField != string.Empty && (row != null && (bool)row[entity.ValidField]);
    }

}

@functions {
    private bool IsValid(CfgRow row, Field field) {
        return WorkContext.HttpContext.Request.HttpMethod == "GET" || field.ValidField == string.Empty || (bool)row[field.ValidField];
    }

    private string Status(CfgRow row, Field field) {
        return IsValid(row, field) ? string.Empty : "has-error";
    }
}

@if (entity == null) {
    <div class="alert alert-danger" role="alert">@Model.Message</div>
}

@foreach (var error in Model.Errors()) {
    <div class="alert alert-danger" role="alert">@error</div>
}

@foreach (var warning in Model.Warnings()) {
    <div class="alert alert-warning" role="alert">@warning</div>
}

@using (Html.BeginFormAntiForgeryPost("Form", FormMethod.Post, new { role = "form", enctype = "multipart/form-data", id = "id_form" })) {

    <input type="hidden" id="id_focus" name="form_focus" value="@focus" />

    if (row != null) {

        foreach (var field in fields) {

            var value = row[field.Alias] ?? string.Empty;

            if (field.Type.StartsWith("date") && field.Format != string.Empty) {
                value = ((DateTime)value).ToString(field.Format);
            }

            if (field.PrimaryKey) {
                <input type="hidden" name="@field.Alias" id="@field.Alias" value="@value" />
            } else {
                var map = Model.Maps.FirstOrDefault(m => m.Name == field.Map);
                if (map != null) {
                    <div class="form-group @(Status(row,field))">
                        <label for="@field.Alias">@field.Label</label>
                        @if (map.Items.Any()) {
                            if (map.Items.All(i => !i.To.Equals(value))) {
                                value = map.Items.First().To;
                            }
                            if (map.Items.Count > 3) {
                                <select class="form-control @field.Class" name="@field.Alias" id="id_@field.Alias" data-tfl-post-back="@field.PostBack">
                                    @foreach (var item in map.Items) {
                                        <option value="@item.To" selected="@(value.Equals(item.To))">@item.From</option>
                                    }
                                </select>
                            } else {
                                if (map.Items.Count > 2) {
                                    foreach (var item in map.Items) {
                                        <div class="radio">
                                            <label>
                                                <input class="@field.Class" type="radio" name="@field.Alias" id="id_@field.Alias" value="@item.To" checked="@(value.Equals(item.To))" data-tfl-post-back="@field.PostBack" />@item.From
                                            </label>
                                        </div>
                                    }
                                } else {
                                    <br />
                                    foreach (var item in map.Items) {
                                        <label class="radio-inline">
                                            <input class="@field.Class" type="radio" name="@field.Alias" id="id_@field.Alias" value="@item.To" checked="@(value.Equals(item.To))" data-tfl-post-back="@field.PostBack" /> &nbsp;@item.From
                                        </label>
                                    }
                                }
                            }
                        } else {
                            <p class="text-warning">@field.Label doesn't have any items!</p>
                        }
                    </div>
                } else {
                    var type = field.InputType == "defer" ? field.Type : field.InputType;
                    switch (type) {
                        case "file":
                            PipelineFilePart filePart = null;

                            var str = value.ToString();
                            if (str != string.Empty) {
                                var id = str.Split(new[] { '/' }, StringSplitOptions.None).LastOrDefault();
                                if (id != null) {
                                    int cid;
                                    if (int.TryParse(id, out cid)) {
                                        filePart = WorkContext.Resolve<IContentManager>().Get(cid).As<PipelineFilePart>();
                                    }
                                }
                            }

                            <div class="form-group @(Status(row,field))">
                                <label for="@field.Alias">@field.Label</label>
                                <input class="form-control @field.Class"
                                       id="id_@(field.Alias)"
                                       name="@(field.Alias)"
                                       type="file"
                                       data-tfl-post-back="@field.PostBack"
                                       @(field.InputAccept == "" ? string.Empty : "accept=\""+field.InputAccept+"\"")
                                       @(field.InputCapture == "" ? string.Empty : "capture=\""+field.InputCapture+"\"") />
                                @if (filePart != null) {
                                    <span class="text-muted"><strong>Caution</strong>: File <strong>@filePart.FileName()</strong> is saved in @field.Label.</span>
                                }
                                @if (!IsValid(row, field)) {
                                    <span class="help-block">@(row[field.MessageField].ToString().Replace('|', ' '))</span>
                                }
                            </div>
                            break;
                        case "bool":
                        case "boolean":
                            <div class="@(Status(row, field))">
                                <div class="checkbox">
                                    <label for="@field.Alias">
                                        <input name="@field.Alias"
                                               id="id_@field.Alias"
                                               type="checkbox"
                                               checked="@((bool)value)"
                                               data-tfl-post-back="@field.PostBack" /> @field.Label
                                        </label>
                                    </div>
                                </div>
                            break;
                        default:
                            <div class="form-group @(Status(row,field))">
                                <label for="@field.Alias">@field.Label</label>
                                @{
                                    var useTextArea = field.Length == "max";
                                    int length = 4000;
                                    if (!useTextArea) {
                                        if (int.TryParse(field.Length, out length)) {
                                            useTextArea = length >= 255;
                                        }
                                    }
                                }
                                @if (useTextArea) {
                                    <textarea class="form-control @field.Class"
                                              name="@field.Alias"
                                              id="id_@field.Alias"
                                              rows="3"
                                              placeholder="@field.Label"
                                              maxlength="@length" 
                                              data-tfl-post-back="@field.PostBack" >@value.ToString().Trim()</textarea>
                                } else {
                                    <input type="text"
                                           class="form-control @field.Class"
                                           maxlength="@field.Length"
                                           name="@field.Alias"
                                           id="id_@field.Alias"
                                           placeholder="@field.Label"
                                           value="@value"
                                           data-tfl-post-back="@field.PostBack" />
                                }

                                @if (field.Hint != string.Empty) {
                                    <span class="text-muted">@field.Hint</span>
                                }
                                @if (!IsValid(row, field)) {
                                    <span class="help-block">@(row[field.MessageField].ToString().Replace('|', ' '))</span>
                                }
                            </div>
                            break;
                        }
                    }
                }
            }
        }

        <input name="submit"
                type="submit"
                value="Submit"
                disabled="@(!valid)"
                class="btn @(valid ? "btn-primary" : "btn-warning")" />
}
