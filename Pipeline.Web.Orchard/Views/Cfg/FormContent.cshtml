@using Transformalize
@using System.Linq
@model Transformalize.Configuration.Process

@foreach (var error in Model.Errors()) {
    <div class="alert alert-danger" role="alert">@error</div>
}

@foreach (var warning in Model.Warnings()) {
    <div class="alert alert-warning" role="alert">@warning</div>
}

<form id="id_form" role="form" method="POST" enctype="multipart/form-data">
    <input type="hidden" name="__RequestVerificationToken" value="@Html.AntiForgeryTokenValueOrchard()" />
    <input type="hidden" id="id_intention" name="form_intention" value="refresh" />
    <input type="hidden" id="id_focus" name="form_focus" value="default" />

    @foreach (var entity in Model.Entities) {

        var active = Model.GetActiveParameters();

        var row = entity.Rows.FirstOrDefault();
        if (row == null) {
            row = new CfgRow(entity.Fields.Where(f => f.Input).Select(f => f.Alias).ToArray());
            foreach (var field in entity.Fields.Where(f => f.Input)) {
                var parameter = active.FirstOrDefault(p => p.Name.Equals(field.Alias, StringComparison.OrdinalIgnoreCase));
                if (parameter != null && !string.IsNullOrEmpty(parameter.Value)) {
                    row[field.Alias] = field.Convert(parameter.Value);
                } else {
                    row[field.Alias] = field.Default == Constants.DefaultSetting ? Constants.TypeDefaults()[field.Type] : field.Convert(field.Default);
                }
            }
        }

        foreach (var field in entity.Fields.Where(f => f.Input)) {

            var parameter = active.FirstOrDefault(p => p.Name.Equals(field.Alias, StringComparison.OrdinalIgnoreCase));

            object value;
            if (Request.HttpMethod.Equals("GET")) {  // take value from loaded row
                if (string.IsNullOrWhiteSpace(field.Format)) {
                    value = row[field.Alias];
                } else {
                    value = field.Format.Contains("{") ? string.Format(field.Format, row[field.Alias]) : string.Format("{0:" + field.Format + "}", row[field.Alias]);
                }
            } else {
                value = parameter == null ? string.Empty : parameter.Value;
            }

            if (field.PrimaryKey) {
                <input type="hidden" name="@field.Alias" id="@field.Alias" value="@value" />
            } else {
                var map = Model.Maps.FirstOrDefault(m => m.Name.Equals(field.Name, StringComparison.OrdinalIgnoreCase));
                if (map != null) {
                    <div class="form-group">
                        <label for="@field.Alias">@field.Label</label>
                        <select class="form-control select @field.Class" name="@field.Alias" id="@field.Alias">
                            @if (map.Items.Any()) {
                                if (map.Items.All(i => !i.To.Equals(value))) {
                                    value = map.Items.First().To;
                                }
                                foreach (var item in map.Items) {
                                    <option value="@item.To" selected="@(value.Equals(item.To))">@item.From</option>
                                }
                            } else {
                                <option value="" selected="selected"> </option>
                            }
                        </select>
                    </div>
                } else {
                    var type = field.InputType == "defer" ? field.Type : field.InputType;
                    switch (type) {
                        case "file":
                            <div class="form-group">
                                <label for="@field.Alias">@field.Label</label>
                                <input class="form-control @field.Class"
                                       id="@(field.Alias)"
                                       name="@(field.Alias)"
                                       type="file"
                                       accept="@field.InputAccept"
                                       capture="@field.InputCapture" />
                            </div>
                            break;
                        case "date":
                        case "datetime":
                            <div class="form-group">
                                <label for="@field.Alias">@field.Label</label>
                                <input class="form-control date @field.Class"
                                       type="date"
                                       id="@(field.Alias)"
                                       name="@(field.Alias)"
                                       value="@(((DateTime)value).ToString(field.Format == string.Empty ? "yyyy-MM-dd": field.Format))" />
                            </div>
                            break;
                        case "bool":
                        case "boolean":
                            <div class="checkbox">
                                <label>
                                    <input name="@field.Alias"
                                           id="@field.Alias"
                                           type="checkbox"
                                           checked="@((bool)value)" /> @field.Label
                                    </label>
                                </div>
                            break;
                        default:
                            <div class="form-group">
                                <label for="@field.Alias">@field.Label</label>
                                <input type="text"
                                       class="form-control @field.Class"
                                       maxlength="@field.Length"
                                       name="@field.Alias"
                                       id="@field.Alias"
                                       placeholder="@field.Label"
                                       value="@value" />
                            </div>
                            if (field.ValidField != string.Empty && !(bool)row[field.ValidField]) {
                                <div>There is a problem: @(row[field.ValidMessageField])</div>
                            }
                            break;
                    }
                }
            }
        }

    }
    <input type="submit" value="Submit" class="btn btn-default" />
</form>