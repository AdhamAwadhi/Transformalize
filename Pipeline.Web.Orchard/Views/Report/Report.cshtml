@using Pipeline.Configuration
@using Pipeline.Web.Orchard.Services
@using SortDirection = Pipeline.Web.Orchard.Services.SortDirection
@model Process
@{
    Style.Require("jQueryUI_Orchard");
    Script.Require("jQuery").AtHead();
    Script.Require("jQueryUI").AtHead();
    var sortService = WorkContext.Resolve<ISortService>();
}

<style>
    .btn-sort {
        background-color: #dbdbdb;
        border-color: #d2d1d1;
        color: #727272;
    }

    .btn-xs, .btn-group-xs > .btn {
        border-radius: 3px;
        font-size: 9px;
        line-height: 1.5;
    }

    th.sorter .btn-xs {
        font-size: 7px !important;
    }

    th.sorter {
        padding: 0 3px 3px 4px !important;
    }
</style>

<h3>@Model.Name</h3>

@foreach (var warning in Model.Warnings()) {
    <div class="alert alert-warning" role="alert">@warning</div>
}

<form id="id_report" role="form">
    <input type="hidden" name="sort" value="@(Request["sort"] ?? string.Empty)" />
    @if (Model.Environments.Any(e => e.Parameters.Any(p => p.Prompt))) {
        var parameters = string.IsNullOrEmpty(Model.Environment) ? Model.Environments.First().Parameters.Where(p => p.Prompt).ToArray() : Model.Environments.First(e => e.Name == Model.Environment).Parameters.Where(p => p.Prompt).ToArray();
        for (var i = 0; i < parameters.Length; i++) {
            var parameter = parameters[i];
            <div class="row">
                <div class="form-group form-group-sm">
                    <label class="col-sm-1 control-label" for="@parameter.Name">@parameter.Name</label>
                    <div class="col-sm-10">
                        @switch (parameter.Type) {
                            case "date":
                            case "datetime":
                                var requestedDate = Request.QueryString[parameter.Name] ?? (string.IsNullOrEmpty(parameter.Value) ? DateTime.Now.ToString("yyyy-MM-dd") : parameter.Value);
                                <input class="form-control date"
                                       type="datetime"
                                       name="@parameter.Name"
                                       value="@(requestedDate)"/>
                                break;
                            default:
                                var requestedValue = Request.QueryString[parameter.Name] ?? parameter.Value;
                                if (string.IsNullOrEmpty(parameter.Map)) {
                                    <input class="form-control"
                                           name="@parameter.Name"
                                           value="@(requestedValue)"/>
                                } else {
                                    <select class="form-control" name="@parameter.Name">
                                        @foreach (var item in Model.Maps.First(m => m.Name == parameter.Map).Items) {
                                            <option value="@item.To" selected="@(item.To.ToString() == requestedValue)">@item.From</option>
                                        }
                                    </select>
                                }
                                break;
                        }
                    </div>
                    @if (i == parameters.Length - 1) {
                        <div class="col-sm-1">
                            <button type="submit" class="btn btn-warning btn-sm pull-right">Submit</button>
                        </div>
                    }
                </div>
            </div>
        }
    }

    @foreach (var entity in Model.Entities) {
        var fields = entity.GetAllOutputFields().ToArray();
        <div class="row">
            <div class="table-responsive col-sm-12">
                <table class="table table-condensed table-hover table-striped">
                    <thead>
                    <tr>
                        @foreach (var field in fields) {
                            <th>@field.Label</th>
                        }
                    </tr>
                    @if (fields.Any(f => f.Sortable)) {
                        var expression = Request["sort"] ?? string.Empty;
                        <tr>
                            @for (var i = 0; i < fields.Length; i++) {
                                var field = fields[i];
                                var number = i + 1;
                                if (field.Sortable) {
                                    <th class="sorter" data-order-by="@(number)">
                                        <div aclass="btn-group btn-group-xs">
                                            <a href="javascript:void()" class="btn btn-xs @(sortService.Sort(number, expression) == SortDirection.Asc ? "btn-primary" : "btn-sort") sortable">
                                                <span class="glyphicon glyphicon-chevron-up"></span>
                                            </a>
                                            <a href="javascript:void()" class="btn btn-xs @(sortService.Sort(number, expression) == SortDirection.Desc ? "btn-primary" : "btn-sort") sortable">
                                                <span class="glyphicon glyphicon-chevron-down"></span>
                                            </a>
                                        </div>
                                    </th>
                                }
                                else {
                                    <th style="padding: 0 3px 3px 1px;">&nbsp;</th>
                                }
                            }
                        </tr>
                    }
                    </thead>
                    <tbody>
                    @foreach (var row in entity.Rows) {
                        <tr>
                            @foreach (var field in entity.GetAllOutputFields()) {
                                <td>
                                    @if (field.Type.StartsWith("bool")) {
                                        if ((bool) row[field.Alias]) {
                                            <span style="color: #73a839;" class="glyphicon glyphicon-ok"></span>
                                        }
                                        else {
                                            <span style="color: #c71c22;" class="glyphicon glyphicon-remove"></span>
                                        }
                                    }
                                    else {
                                        @(field.Raw ? Html.Raw(row[field.Alias]) : row[field.Alias])
                                    }
                                </td>
                            }
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    }
</form>

<script type="text/javascript">
    //<!--
    $(document).ready(function () {
        $('.form-control.date').datepicker();

        $('.sortable').click(function () {
            $(this).toggleClass('btn-sort').toggleClass('btn-primary');

            $(this).siblings().each(function (i) {
                if ($(this).hasClass('btn-primary')) {
                    $(this).removeClass('btn-primary').addClass('btn-sort');
                }
            });

            var sort = '';
            $('th.sorter').each(function (i) {
                var field = $(this).attr('data-order-by');
                if (field) {
                    var index = 0;
                    $('a', $(this)).each(function (j) {
                        if ($(this).hasClass('btn-primary')) {
                            switch (index) {
                                case 0:
                                    sort += field + 'a.';
                                    break;
                                case 1:
                                    sort += field + 'd.';
                                    break;
                                default:
                                    break;
                            }
                        }
                        index++;
                    });
                }
            });
            var expression = sort.replace(/^\.+|\.+$/gm, '');
            console.log(expression);
            $("#id_report input[name=sort]").val(expression);
            $("#id_report").submit();
        });
    });

    //-->
</script>





